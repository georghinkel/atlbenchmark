//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Make2AntNamespace.Make
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Meta;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the Makefile class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Makefile/")]
    [DebuggerDisplayAttribute("Makefile {Name}")]
    public class Makefile : ModelElement, IMakefile, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        /// <summary>
        /// The backing field for the Comment property
        /// </summary>
        private IComment _comment;
        
        /// <summary>
        /// The backing field for the Elements property
        /// </summary>
        private ObservableCompositionOrderedSet<IElement> _elements;
        
        private static IClass _classInstance;
        
        public Makefile()
        {
            this._elements = new ObservableCompositionOrderedSet<IElement>(this);
            this._elements.CollectionChanging += this.ElementsCollectionChanging;
            this._elements.CollectionChanged += this.ElementsCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// The comment property
        /// </summary>
        [XmlElementNameAttribute("comment")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IComment Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    IComment old = this._comment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommentChanging(e);
                    this.OnPropertyChanging("Comment", e);
                    this._comment = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetComment;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetComment;
                    }
                    this.OnCommentChanged(e);
                    this.OnPropertyChanged("Comment", e);
                }
            }
        }
        
        /// <summary>
        /// The elements property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("elements")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IElement> Elements
        {
            get
            {
                return this._elements;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new MakefileChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MakefileReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Makefile/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Comment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanging;
        
        /// <summary>
        /// Gets fired when the Comment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommentChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Comment property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetComment(object sender, System.EventArgs eventArgs)
        {
            this.Comment = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Elements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Elements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Elements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ElementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Elements", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Comment))
            {
                return ModelHelper.CreatePath("Comment");
            }
            int elementsIndex = ModelHelper.IndexOfReference(this.Elements, element);
            if ((elementsIndex != -1))
            {
                return ModelHelper.CreatePath("elements", elementsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "COMMENT"))
            {
                return this.Comment;
            }
            if ((reference == "ELEMENTS"))
            {
                if ((index < this.Elements.Count))
                {
                    return this.Elements[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ELEMENTS"))
            {
                return this._elements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMMENT"))
            {
                this.Comment = ((IComment)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Comment"))
            {
                return new CommentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Comment"))
            {
                return new CommentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Makefile/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Makefile class
        /// </summary>
        public class MakefileChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Makefile _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MakefileChildrenCollection(Makefile parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Comment != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Elements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CommentChanged += this.PropagateValueChanges;
                this._parent.Elements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CommentChanged -= this.PropagateValueChanges;
                this._parent.Elements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Comment == null))
                {
                    IComment commentCasted = item.As<IComment>();
                    if ((commentCasted != null))
                    {
                        this._parent.Comment = commentCasted;
                        return;
                    }
                }
                IElement elementsCasted = item.As<IElement>();
                if ((elementsCasted != null))
                {
                    this._parent.Elements.Add(elementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Comment = null;
                this._parent.Elements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Comment))
                {
                    return true;
                }
                if (this._parent.Elements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Comment != null))
                {
                    array[arrayIndex] = this._parent.Comment;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> elementsEnumerator = this._parent.Elements.GetEnumerator();
                try
                {
                    for (
                    ; elementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Comment == item))
                {
                    this._parent.Comment = null;
                    return true;
                }
                IElement elementItem = item.As<IElement>();
                if (((elementItem != null) 
                            && this._parent.Elements.Remove(elementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Comment).Concat(this._parent.Elements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Makefile class
        /// </summary>
        public class MakefileReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Makefile _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MakefileReferencedElementsCollection(Makefile parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Comment != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Elements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CommentChanged += this.PropagateValueChanges;
                this._parent.Elements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CommentChanged -= this.PropagateValueChanges;
                this._parent.Elements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Comment == null))
                {
                    IComment commentCasted = item.As<IComment>();
                    if ((commentCasted != null))
                    {
                        this._parent.Comment = commentCasted;
                        return;
                    }
                }
                IElement elementsCasted = item.As<IElement>();
                if ((elementsCasted != null))
                {
                    this._parent.Elements.Add(elementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Comment = null;
                this._parent.Elements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Comment))
                {
                    return true;
                }
                if (this._parent.Elements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Comment != null))
                {
                    array[arrayIndex] = this._parent.Comment;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> elementsEnumerator = this._parent.Elements.GetEnumerator();
                try
                {
                    for (
                    ; elementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = elementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    elementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Comment == item))
                {
                    this._parent.Comment = null;
                    return true;
                }
                IElement elementItem = item.As<IElement>();
                if (((elementItem != null) 
                            && this._parent.Elements.Remove(elementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Comment).Concat(this._parent.Elements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IMakefile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IMakefile modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IMakefile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IMakefile modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the comment property
        /// </summary>
        private sealed class CommentProxy : ModelPropertyChange<IMakefile, IComment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommentProxy(IMakefile modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IComment Value
            {
                get
                {
                    return this.ModelElement.Comment;
                }
                set
                {
                    this.ModelElement.Comment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommentChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Element class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Element/")]
    [DebuggerDisplayAttribute("Element {Name}")]
    public abstract class Element : ModelElement, IElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Element/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Element/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Rule class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Rule/")]
    [DebuggerDisplayAttribute("Rule {Name}")]
    public class Rule : Element, IRule, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dependencies property
        /// </summary>
        private ObservableCompositionOrderedSet<IDependency> _dependencies;
        
        /// <summary>
        /// The backing field for the ShellLines property
        /// </summary>
        private RuleShellLinesCollection _shellLines;
        
        private static IClass _classInstance;
        
        public Rule()
        {
            this._dependencies = new ObservableCompositionOrderedSet<IDependency>(this);
            this._dependencies.CollectionChanging += this.DependenciesCollectionChanging;
            this._dependencies.CollectionChanged += this.DependenciesCollectionChanged;
            this._shellLines = new RuleShellLinesCollection(this);
            this._shellLines.CollectionChanging += this.ShellLinesCollectionChanging;
            this._shellLines.CollectionChanged += this.ShellLinesCollectionChanged;
        }
        
        /// <summary>
        /// The dependencies property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("dependencies")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDependency> Dependencies
        {
            get
            {
                return this._dependencies;
            }
        }
        
        /// <summary>
        /// The shellLines property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("shellLines")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("ruleShellLine")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IShellLine> ShellLines
        {
            get
            {
                return this._shellLines;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RuleChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RuleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Rule/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Dependencies property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependenciesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Dependencies", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Dependencies property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependenciesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Dependencies", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ShellLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShellLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ShellLines", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ShellLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShellLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ShellLines", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int dependenciesIndex = ModelHelper.IndexOfReference(this.Dependencies, element);
            if ((dependenciesIndex != -1))
            {
                return ModelHelper.CreatePath("dependencies", dependenciesIndex);
            }
            int shellLinesIndex = ModelHelper.IndexOfReference(this.ShellLines, element);
            if ((shellLinesIndex != -1))
            {
                return ModelHelper.CreatePath("shellLines", shellLinesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "DEPENDENCIES"))
            {
                if ((index < this.Dependencies.Count))
                {
                    return this.Dependencies[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "SHELLLINES"))
            {
                if ((index < this.ShellLines.Count))
                {
                    return this.ShellLines[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DEPENDENCIES"))
            {
                return this._dependencies;
            }
            if ((feature == "SHELLLINES"))
            {
                return this._shellLines;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Rule/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Rule class
        /// </summary>
        public class RuleChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Rule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RuleChildrenCollection(Rule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Dependencies.Count);
                    count = (count + this._parent.ShellLines.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Dependencies.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ShellLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Dependencies.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ShellLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDependency dependenciesCasted = item.As<IDependency>();
                if ((dependenciesCasted != null))
                {
                    this._parent.Dependencies.Add(dependenciesCasted);
                }
                IShellLine shellLinesCasted = item.As<IShellLine>();
                if ((shellLinesCasted != null))
                {
                    this._parent.ShellLines.Add(shellLinesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Dependencies.Clear();
                this._parent.ShellLines.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Dependencies.Contains(item))
                {
                    return true;
                }
                if (this._parent.ShellLines.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> dependenciesEnumerator = this._parent.Dependencies.GetEnumerator();
                try
                {
                    for (
                    ; dependenciesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dependenciesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dependenciesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> shellLinesEnumerator = this._parent.ShellLines.GetEnumerator();
                try
                {
                    for (
                    ; shellLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = shellLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    shellLinesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDependency dependencyItem = item.As<IDependency>();
                if (((dependencyItem != null) 
                            && this._parent.Dependencies.Remove(dependencyItem)))
                {
                    return true;
                }
                IShellLine shellLineItem = item.As<IShellLine>();
                if (((shellLineItem != null) 
                            && this._parent.ShellLines.Remove(shellLineItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Dependencies).Concat(this._parent.ShellLines).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Rule class
        /// </summary>
        public class RuleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Rule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RuleReferencedElementsCollection(Rule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Dependencies.Count);
                    count = (count + this._parent.ShellLines.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Dependencies.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ShellLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Dependencies.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ShellLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDependency dependenciesCasted = item.As<IDependency>();
                if ((dependenciesCasted != null))
                {
                    this._parent.Dependencies.Add(dependenciesCasted);
                }
                IShellLine shellLinesCasted = item.As<IShellLine>();
                if ((shellLinesCasted != null))
                {
                    this._parent.ShellLines.Add(shellLinesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Dependencies.Clear();
                this._parent.ShellLines.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Dependencies.Contains(item))
                {
                    return true;
                }
                if (this._parent.ShellLines.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> dependenciesEnumerator = this._parent.Dependencies.GetEnumerator();
                try
                {
                    for (
                    ; dependenciesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dependenciesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dependenciesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> shellLinesEnumerator = this._parent.ShellLines.GetEnumerator();
                try
                {
                    for (
                    ; shellLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = shellLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    shellLinesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDependency dependencyItem = item.As<IDependency>();
                if (((dependencyItem != null) 
                            && this._parent.Dependencies.Remove(dependencyItem)))
                {
                    return true;
                }
                IShellLine shellLineItem = item.As<IShellLine>();
                if (((shellLineItem != null) 
                            && this._parent.ShellLines.Remove(shellLineItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Dependencies).Concat(this._parent.ShellLines).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Macro class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Macro/")]
    [DebuggerDisplayAttribute("Macro {Name}")]
    public class Macro : Element, IMacro, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Macro/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Macro/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IMacro, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IMacro modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ShellLine class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//ShellLine/")]
    public class ShellLine : ModelElement, IShellLine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Command property
        /// </summary>
        private string _command;
        
        /// <summary>
        /// The backing field for the Display property
        /// </summary>
        private bool _display;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The command property
        /// </summary>
        [XmlElementNameAttribute("command")]
        [XmlAttributeAttribute(true)]
        public virtual string Command
        {
            get
            {
                return this._command;
            }
            set
            {
                if ((this._command != value))
                {
                    string old = this._command;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommandChanging(e);
                    this.OnPropertyChanging("Command", e);
                    this._command = value;
                    this.OnCommandChanged(e);
                    this.OnPropertyChanged("Command", e);
                }
            }
        }
        
        /// <summary>
        /// The display property
        /// </summary>
        [XmlElementNameAttribute("display")]
        [XmlAttributeAttribute(true)]
        public virtual bool Display
        {
            get
            {
                return this._display;
            }
            set
            {
                if ((this._display != value))
                {
                    bool old = this._display;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisplayChanging(e);
                    this.OnPropertyChanging("Display", e);
                    this._display = value;
                    this.OnDisplayChanged(e);
                    this.OnPropertyChanged("Display", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// The ruleShellLine property
        /// </summary>
        [XmlElementNameAttribute("ruleShellLine")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("shellLines")]
        public virtual IRule RuleShellLine
        {
            get
            {
                return ModelHelper.CastAs<IRule>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ShellLineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//ShellLine/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Command property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommandChanging;
        
        /// <summary>
        /// Gets fired when the Command property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommandChanged;
        
        /// <summary>
        /// Gets fired before the Display property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplayChanging;
        
        /// <summary>
        /// Gets fired when the Display property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplayChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the RuleShellLine property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleShellLineChanging;
        
        /// <summary>
        /// Gets fired when the RuleShellLine property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuleShellLineChanged;
        
        /// <summary>
        /// Raises the CommandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisplayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisplayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RuleShellLineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleShellLineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleShellLineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IRule oldRuleShellLine = ModelHelper.CastAs<IRule>(oldParent);
            IRule newRuleShellLine = ModelHelper.CastAs<IRule>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRuleShellLine, newRuleShellLine);
            this.OnRuleShellLineChanging(e);
            this.OnPropertyChanging("RuleShellLine");
        }
        
        /// <summary>
        /// Raises the RuleShellLineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuleShellLineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuleShellLineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRule oldRuleShellLine = ModelHelper.CastAs<IRule>(oldParent);
            IRule newRuleShellLine = ModelHelper.CastAs<IRule>(newParent);
            if ((oldRuleShellLine != null))
            {
                oldRuleShellLine.ShellLines.Remove(this);
            }
            if ((newRuleShellLine != null))
            {
                newRuleShellLine.ShellLines.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRuleShellLine, newRuleShellLine);
            this.OnRuleShellLineChanged(e);
            this.OnPropertyChanged("RuleShellLine", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMMAND"))
            {
                return this.Command;
            }
            if ((attribute == "DISPLAY"))
            {
                return this.Display;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RULESHELLLINE"))
            {
                this.RuleShellLine = ((IRule)(value));
                return;
            }
            if ((feature == "COMMAND"))
            {
                this.Command = ((string)(value));
                return;
            }
            if ((feature == "DISPLAY"))
            {
                this.Display = ((bool)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RuleShellLine"))
            {
                return new RuleShellLineProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RuleShellLine"))
            {
                return new RuleShellLineProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//ShellLine/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ShellLine class
        /// </summary>
        public class ShellLineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ShellLine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ShellLineReferencedElementsCollection(ShellLine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RuleShellLine != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RuleShellLineChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RuleShellLineChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RuleShellLine == null))
                {
                    IRule ruleShellLineCasted = item.As<IRule>();
                    if ((ruleShellLineCasted != null))
                    {
                        this._parent.RuleShellLine = ruleShellLineCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RuleShellLine = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RuleShellLine))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RuleShellLine != null))
                {
                    array[arrayIndex] = this._parent.RuleShellLine;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RuleShellLine == item))
                {
                    this._parent.RuleShellLine = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RuleShellLine).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the command property
        /// </summary>
        private sealed class CommandProxy : ModelPropertyChange<IShellLine, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommandProxy(IShellLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Command;
                }
                set
                {
                    this.ModelElement.Command = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommandChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommandChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the display property
        /// </summary>
        private sealed class DisplayProxy : ModelPropertyChange<IShellLine, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisplayProxy(IShellLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Display;
                }
                set
                {
                    this.ModelElement.Display = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisplayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DisplayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IShellLine, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IShellLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ruleShellLine property
        /// </summary>
        private sealed class RuleShellLineProxy : ModelPropertyChange<IShellLine, IRule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RuleShellLineProxy(IShellLine modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRule Value
            {
                get
                {
                    return this.ModelElement.RuleShellLine;
                }
                set
                {
                    this.ModelElement.RuleShellLine = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleShellLineChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuleShellLineChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Comment class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Comment/")]
    public class Comment : ModelElement, IComment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Text property
        /// </summary>
        private string _text;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The text property
        /// </summary>
        [XmlElementNameAttribute("text")]
        [XmlAttributeAttribute(true)]
        public virtual string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    string old = this._text;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTextChanging(e);
                    this.OnPropertyChanging("Text", e);
                    this._text = value;
                    this.OnTextChanged(e);
                    this.OnPropertyChanged("Text", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Comment/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Text property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TextChanging;
        
        /// <summary>
        /// Gets fired when the Text property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TextChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the TextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTextChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTextChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TEXT"))
            {
                return this.Text;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TEXT"))
            {
                this.Text = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Comment/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the text property
        /// </summary>
        private sealed class TextProxy : ModelPropertyChange<IComment, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TextProxy(IComment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Text;
                }
                set
                {
                    this.ModelElement.Text = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TextChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TextChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IComment, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IComment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Dependency class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//Dependency/")]
    public abstract class Dependency : ModelElement, IDependency, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Dependency/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//Dependency/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IDependency, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IDependency modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the RuleDep class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//RuleDep/")]
    public class RuleDep : Dependency, IRuleDep, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Ruledep property
        /// </summary>
        private IRule _ruledep;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ruledep property
        /// </summary>
        [XmlElementNameAttribute("ruledep")]
        [XmlAttributeAttribute(true)]
        public virtual IRule Ruledep
        {
            get
            {
                return this._ruledep;
            }
            set
            {
                if ((this._ruledep != value))
                {
                    IRule old = this._ruledep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRuledepChanging(e);
                    this.OnPropertyChanging("Ruledep", e);
                    this._ruledep = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRuledep;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRuledep;
                    }
                    this.OnRuledepChanged(e);
                    this.OnPropertyChanged("Ruledep", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RuleDepReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//RuleDep/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Ruledep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuledepChanging;
        
        /// <summary>
        /// Gets fired when the Ruledep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RuledepChanged;
        
        /// <summary>
        /// Raises the RuledepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuledepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuledepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RuledepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRuledepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RuledepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ruledep property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRuledep(object sender, System.EventArgs eventArgs)
        {
            this.Ruledep = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RULEDEP"))
            {
                this.Ruledep = ((IRule)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Ruledep"))
            {
                return new RuledepProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Ruledep"))
            {
                return new RuledepProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//RuleDep/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RuleDep class
        /// </summary>
        public class RuleDepReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RuleDep _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RuleDepReferencedElementsCollection(RuleDep parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Ruledep != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RuledepChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RuledepChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Ruledep == null))
                {
                    IRule ruledepCasted = item.As<IRule>();
                    if ((ruledepCasted != null))
                    {
                        this._parent.Ruledep = ruledepCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Ruledep = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Ruledep))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Ruledep != null))
                {
                    array[arrayIndex] = this._parent.Ruledep;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Ruledep == item))
                {
                    this._parent.Ruledep = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Ruledep).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ruledep property
        /// </summary>
        private sealed class RuledepProxy : ModelPropertyChange<IRuleDep, IRule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RuledepProxy(IRuleDep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRule Value
            {
                get
                {
                    return this.ModelElement.Ruledep;
                }
                set
                {
                    this.ModelElement.Ruledep = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuledepChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RuledepChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FileDep class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Make")]
    [XmlNamespacePrefixAttribute("Make")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Make#//FileDep/")]
    [DebuggerDisplayAttribute("FileDep {Name}")]
    public class FileDep : Dependency, IFileDep, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Date property
        /// </summary>
        private DateTime _date;
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The date property
        /// </summary>
        [XmlElementNameAttribute("date")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    DateTime old = this._date;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateChanging(e);
                    this.OnPropertyChanging("Date", e);
                    this._date = value;
                    this.OnDateChanged(e);
                    this.OnPropertyChanged("Date", e);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//FileDep/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Date property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanging;
        
        /// <summary>
        /// Gets fired when the Date property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Raises the DateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DATE"))
            {
                return this.Date;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DATE"))
            {
                this.Date = ((DateTime)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Make#//FileDep/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the date property
        /// </summary>
        private sealed class DateProxy : ModelPropertyChange<IFileDep, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateProxy(IFileDep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.Date;
                }
                set
                {
                    this.ModelElement.Date = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IFileDep, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IFileDep modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The public interface for FileDep
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FileDep))]
    [XmlDefaultImplementationTypeAttribute(typeof(FileDep))]
    public interface IFileDep : IModelElement, IDependency
    {
        
        /// <summary>
        /// The date property
        /// </summary>
        DateTime Date
        {
            get;
            set;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Date property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DateChanging;
        
        /// <summary>
        /// Gets fired when the Date property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DateChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
    }
    
    /// <summary>
    /// The public interface for RuleDep
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RuleDep))]
    [XmlDefaultImplementationTypeAttribute(typeof(RuleDep))]
    public interface IRuleDep : IModelElement, IDependency
    {
        
        /// <summary>
        /// The ruledep property
        /// </summary>
        IRule Ruledep
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Ruledep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuledepChanging;
        
        /// <summary>
        /// Gets fired when the Ruledep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuledepChanged;
    }
    
    /// <summary>
    /// The public interface for Dependency
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Dependency))]
    [XmlDefaultImplementationTypeAttribute(typeof(Dependency))]
    public interface IDependency : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for Comment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Comment))]
    [XmlDefaultImplementationTypeAttribute(typeof(Comment))]
    public interface IComment : IModelElement
    {
        
        /// <summary>
        /// The text property
        /// </summary>
        string Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Text property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TextChanging;
        
        /// <summary>
        /// Gets fired when the Text property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TextChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for ShellLine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ShellLine))]
    [XmlDefaultImplementationTypeAttribute(typeof(ShellLine))]
    public interface IShellLine : IModelElement
    {
        
        /// <summary>
        /// The command property
        /// </summary>
        string Command
        {
            get;
            set;
        }
        
        /// <summary>
        /// The display property
        /// </summary>
        bool Display
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ruleShellLine property
        /// </summary>
        IRule RuleShellLine
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Command property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommandChanging;
        
        /// <summary>
        /// Gets fired when the Command property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommandChanged;
        
        /// <summary>
        /// Gets fired before the Display property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisplayChanging;
        
        /// <summary>
        /// Gets fired when the Display property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisplayChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the RuleShellLine property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuleShellLineChanging;
        
        /// <summary>
        /// Gets fired when the RuleShellLine property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RuleShellLineChanged;
    }
    
    /// <summary>
    /// The public interface for Macro
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Macro))]
    [XmlDefaultImplementationTypeAttribute(typeof(Macro))]
    public interface IMacro : IModelElement, IElement
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanged;
    }
    
    public class RuleShellLinesCollection : ObservableOppositeOrderedSet<IRule, IShellLine>
    {
        
        public RuleShellLinesCollection(IRule parent) : 
                base(parent)
        {
        }
        
        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((IShellLine)(sender)));
            }
        }
        
        protected override void SetOpposite(IShellLine item, IRule parent)
        {
            if ((parent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.RuleShellLine = parent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.RuleShellLine == this.Parent))
                {
                    item.RuleShellLine = parent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Rule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Rule))]
    [XmlDefaultImplementationTypeAttribute(typeof(Rule))]
    public interface IRule : IModelElement, IElement
    {
        
        /// <summary>
        /// The dependencies property
        /// </summary>
        IOrderedSetExpression<IDependency> Dependencies
        {
            get;
        }
        
        /// <summary>
        /// The shellLines property
        /// </summary>
        IOrderedSetExpression<IShellLine> ShellLines
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Element
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Element))]
    [XmlDefaultImplementationTypeAttribute(typeof(Element))]
    public interface IElement : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for Makefile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Makefile))]
    [XmlDefaultImplementationTypeAttribute(typeof(Makefile))]
    public interface IMakefile : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The comment property
        /// </summary>
        IComment Comment
        {
            get;
            set;
        }
        
        /// <summary>
        /// The elements property
        /// </summary>
        IOrderedSetExpression<IElement> Elements
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Comment property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommentChanging;
        
        /// <summary>
        /// Gets fired when the Comment property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CommentChanged;
    }
}
