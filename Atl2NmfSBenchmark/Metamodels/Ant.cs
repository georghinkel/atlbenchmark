//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Make2AntNamespace.Ant
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Meta;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the Project class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Project/")]
    [DebuggerDisplayAttribute("Project {Name}")]
    public class Project : ModelElement, IProject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Basedir property
        /// </summary>
        private string _basedir;
        
        /// <summary>
        /// The backing field for the Description property
        /// </summary>
        private string _description;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        /// <summary>
        /// The backing field for the Default property
        /// </summary>
        private ITarget _default;
        
        /// <summary>
        /// The backing field for the PathMember property
        /// </summary>
        private IPath _pathMember;
        
        /// <summary>
        /// The backing field for the Properties property
        /// </summary>
        private ObservableCompositionOrderedSet<IProperty> _properties;
        
        /// <summary>
        /// The backing field for the Taskdef property
        /// </summary>
        private ObservableCompositionSet<ITaskDef> _taskdef;
        
        /// <summary>
        /// The backing field for the Targets property
        /// </summary>
        private ObservableCompositionOrderedSet<ITarget> _targets;
        
        private static IClass _classInstance;
        
        public Project()
        {
            this._properties = new ObservableCompositionOrderedSet<IProperty>(this);
            this._properties.CollectionChanging += this.PropertiesCollectionChanging;
            this._properties.CollectionChanged += this.PropertiesCollectionChanged;
            this._taskdef = new ObservableCompositionSet<ITaskDef>(this);
            this._taskdef.CollectionChanging += this.TaskdefCollectionChanging;
            this._taskdef.CollectionChanged += this.TaskdefCollectionChanged;
            this._targets = new ObservableCompositionOrderedSet<ITarget>(this);
            this._targets.CollectionChanging += this.TargetsCollectionChanging;
            this._targets.CollectionChanged += this.TargetsCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The basedir property
        /// </summary>
        [XmlElementNameAttribute("basedir")]
        [XmlAttributeAttribute(true)]
        public virtual string Basedir
        {
            get
            {
                return this._basedir;
            }
            set
            {
                if ((this._basedir != value))
                {
                    string old = this._basedir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBasedirChanging(e);
                    this.OnPropertyChanging("Basedir", e);
                    this._basedir = value;
                    this.OnBasedirChanged(e);
                    this.OnPropertyChanged("Basedir", e);
                }
            }
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        [XmlElementNameAttribute("description")]
        [XmlAttributeAttribute(true)]
        public virtual string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    string old = this._description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDescriptionChanging(e);
                    this.OnPropertyChanging("Description", e);
                    this._description = value;
                    this.OnDescriptionChanged(e);
                    this.OnPropertyChanged("Description", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// The default property
        /// </summary>
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(true)]
        public virtual ITarget Default
        {
            get
            {
                return this._default;
            }
            set
            {
                if ((this._default != value))
                {
                    ITarget old = this._default;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultChanging(e);
                    this.OnPropertyChanging("Default", e);
                    this._default = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDefault;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDefault;
                    }
                    this.OnDefaultChanged(e);
                    this.OnPropertyChanged("Default", e);
                }
            }
        }
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        [XmlElementNameAttribute("pathMember")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IPath PathMember
        {
            get
            {
                return this._pathMember;
            }
            set
            {
                if ((this._pathMember != value))
                {
                    IPath old = this._pathMember;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPathMemberChanging(e);
                    this.OnPropertyChanging("PathMember", e);
                    this._pathMember = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetPathMember;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetPathMember;
                    }
                    this.OnPathMemberChanged(e);
                    this.OnPropertyChanged("PathMember", e);
                }
            }
        }
        
        /// <summary>
        /// The properties property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("properties")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProperty> Properties
        {
            get
            {
                return this._properties;
            }
        }
        
        /// <summary>
        /// The taskdef property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("taskdef")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<ITaskDef> Taskdef
        {
            get
            {
                return this._taskdef;
            }
        }
        
        /// <summary>
        /// The targets property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("targets")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITarget> Targets
        {
            get
            {
                return this._targets;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ProjectChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProjectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Project/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Basedir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasedirChanging;
        
        /// <summary>
        /// Gets fired when the Basedir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasedirChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasedirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasedirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasedirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasedirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasedirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasedirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Default property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefault(object sender, System.EventArgs eventArgs)
        {
            this.Default = null;
        }
        
        /// <summary>
        /// Raises the PathMemberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathMemberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PathMember property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPathMember(object sender, System.EventArgs eventArgs)
        {
            this.PathMember = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Properties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertiesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Properties", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Properties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Properties", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Taskdef property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TaskdefCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Taskdef", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Taskdef property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TaskdefCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Taskdef", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Targets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Targets", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Targets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TargetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Targets", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.PathMember))
            {
                return ModelHelper.CreatePath("PathMember");
            }
            int propertiesIndex = ModelHelper.IndexOfReference(this.Properties, element);
            if ((propertiesIndex != -1))
            {
                return ModelHelper.CreatePath("properties", propertiesIndex);
            }
            int targetsIndex = ModelHelper.IndexOfReference(this.Targets, element);
            if ((targetsIndex != -1))
            {
                return ModelHelper.CreatePath("targets", targetsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PATHMEMBER"))
            {
                return this.PathMember;
            }
            if ((reference == "PROPERTIES"))
            {
                if ((index < this.Properties.Count))
                {
                    return this.Properties[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "TARGETS"))
            {
                if ((index < this.Targets.Count))
                {
                    return this.Targets[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "BASEDIR"))
            {
                return this.Basedir;
            }
            if ((attribute == "DESCRIPTION"))
            {
                return this.Description;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROPERTIES"))
            {
                return this._properties;
            }
            if ((feature == "TASKDEF"))
            {
                return this._taskdef;
            }
            if ((feature == "TARGETS"))
            {
                return this._targets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DEFAULT"))
            {
                this.Default = ((ITarget)(value));
                return;
            }
            if ((feature == "PATHMEMBER"))
            {
                this.PathMember = ((IPath)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "BASEDIR"))
            {
                this.Basedir = ((string)(value));
                return;
            }
            if ((feature == "DESCRIPTION"))
            {
                this.Description = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Default"))
            {
                return new DefaultProxy(this);
            }
            if ((attribute == "PathMember"))
            {
                return new PathMemberProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Default"))
            {
                return new DefaultProxy(this);
            }
            if ((reference == "PathMember"))
            {
                return new PathMemberProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Project/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Project class
        /// </summary>
        public class ProjectChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Project _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProjectChildrenCollection(Project parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PathMember != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Properties.Count);
                    count = (count + this._parent.Taskdef.Count);
                    count = (count + this._parent.Targets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PathMemberChanged += this.PropagateValueChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Taskdef.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Targets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PathMemberChanged -= this.PropagateValueChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Taskdef.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Targets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PathMember == null))
                {
                    IPath pathMemberCasted = item.As<IPath>();
                    if ((pathMemberCasted != null))
                    {
                        this._parent.PathMember = pathMemberCasted;
                        return;
                    }
                }
                IProperty propertiesCasted = item.As<IProperty>();
                if ((propertiesCasted != null))
                {
                    this._parent.Properties.Add(propertiesCasted);
                }
                ITaskDef taskdefCasted = item.As<ITaskDef>();
                if ((taskdefCasted != null))
                {
                    this._parent.Taskdef.Add(taskdefCasted);
                }
                ITarget targetsCasted = item.As<ITarget>();
                if ((targetsCasted != null))
                {
                    this._parent.Targets.Add(targetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PathMember = null;
                this._parent.Properties.Clear();
                this._parent.Taskdef.Clear();
                this._parent.Targets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PathMember))
                {
                    return true;
                }
                if (this._parent.Properties.Contains(item))
                {
                    return true;
                }
                if (this._parent.Taskdef.Contains(item))
                {
                    return true;
                }
                if (this._parent.Targets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PathMember != null))
                {
                    array[arrayIndex] = this._parent.PathMember;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> propertiesEnumerator = this._parent.Properties.GetEnumerator();
                try
                {
                    for (
                    ; propertiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = propertiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    propertiesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> taskdefEnumerator = this._parent.Taskdef.GetEnumerator();
                try
                {
                    for (
                    ; taskdefEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = taskdefEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    taskdefEnumerator.Dispose();
                }
                IEnumerator<IModelElement> targetsEnumerator = this._parent.Targets.GetEnumerator();
                try
                {
                    for (
                    ; targetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = targetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    targetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PathMember == item))
                {
                    this._parent.PathMember = null;
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.Properties.Remove(propertyItem)))
                {
                    return true;
                }
                ITaskDef taskDefItem = item.As<ITaskDef>();
                if (((taskDefItem != null) 
                            && this._parent.Taskdef.Remove(taskDefItem)))
                {
                    return true;
                }
                ITarget targetItem = item.As<ITarget>();
                if (((targetItem != null) 
                            && this._parent.Targets.Remove(targetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PathMember).Concat(this._parent.Properties).Concat(this._parent.Taskdef).Concat(this._parent.Targets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Project class
        /// </summary>
        public class ProjectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Project _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProjectReferencedElementsCollection(Project parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Default != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PathMember != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Properties.Count);
                    count = (count + this._parent.Taskdef.Count);
                    count = (count + this._parent.Targets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DefaultChanged += this.PropagateValueChanges;
                this._parent.PathMemberChanged += this.PropagateValueChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Taskdef.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Targets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DefaultChanged -= this.PropagateValueChanges;
                this._parent.PathMemberChanged -= this.PropagateValueChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Taskdef.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Targets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Default == null))
                {
                    ITarget defaultCasted = item.As<ITarget>();
                    if ((defaultCasted != null))
                    {
                        this._parent.Default = defaultCasted;
                        return;
                    }
                }
                if ((this._parent.PathMember == null))
                {
                    IPath pathMemberCasted = item.As<IPath>();
                    if ((pathMemberCasted != null))
                    {
                        this._parent.PathMember = pathMemberCasted;
                        return;
                    }
                }
                IProperty propertiesCasted = item.As<IProperty>();
                if ((propertiesCasted != null))
                {
                    this._parent.Properties.Add(propertiesCasted);
                }
                ITaskDef taskdefCasted = item.As<ITaskDef>();
                if ((taskdefCasted != null))
                {
                    this._parent.Taskdef.Add(taskdefCasted);
                }
                ITarget targetsCasted = item.As<ITarget>();
                if ((targetsCasted != null))
                {
                    this._parent.Targets.Add(targetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Default = null;
                this._parent.PathMember = null;
                this._parent.Properties.Clear();
                this._parent.Taskdef.Clear();
                this._parent.Targets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Default))
                {
                    return true;
                }
                if ((item == this._parent.PathMember))
                {
                    return true;
                }
                if (this._parent.Properties.Contains(item))
                {
                    return true;
                }
                if (this._parent.Taskdef.Contains(item))
                {
                    return true;
                }
                if (this._parent.Targets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Default != null))
                {
                    array[arrayIndex] = this._parent.Default;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PathMember != null))
                {
                    array[arrayIndex] = this._parent.PathMember;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> propertiesEnumerator = this._parent.Properties.GetEnumerator();
                try
                {
                    for (
                    ; propertiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = propertiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    propertiesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> taskdefEnumerator = this._parent.Taskdef.GetEnumerator();
                try
                {
                    for (
                    ; taskdefEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = taskdefEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    taskdefEnumerator.Dispose();
                }
                IEnumerator<IModelElement> targetsEnumerator = this._parent.Targets.GetEnumerator();
                try
                {
                    for (
                    ; targetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = targetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    targetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Default == item))
                {
                    this._parent.Default = null;
                    return true;
                }
                if ((this._parent.PathMember == item))
                {
                    this._parent.PathMember = null;
                    return true;
                }
                IProperty propertyItem = item.As<IProperty>();
                if (((propertyItem != null) 
                            && this._parent.Properties.Remove(propertyItem)))
                {
                    return true;
                }
                ITaskDef taskDefItem = item.As<ITaskDef>();
                if (((taskDefItem != null) 
                            && this._parent.Taskdef.Remove(taskDefItem)))
                {
                    return true;
                }
                ITarget targetItem = item.As<ITarget>();
                if (((targetItem != null) 
                            && this._parent.Targets.Remove(targetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Default).Concat(this._parent.PathMember).Concat(this._parent.Properties).Concat(this._parent.Taskdef).Concat(this._parent.Targets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IProject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the basedir property
        /// </summary>
        private sealed class BasedirProxy : ModelPropertyChange<IProject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BasedirProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Basedir;
                }
                set
                {
                    this.ModelElement.Basedir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasedirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasedirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the description property
        /// </summary>
        private sealed class DescriptionProxy : ModelPropertyChange<IProject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DescriptionProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Description;
                }
                set
                {
                    this.ModelElement.Description = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IProject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the default property
        /// </summary>
        private sealed class DefaultProxy : ModelPropertyChange<IProject, ITarget>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITarget Value
            {
                get
                {
                    return this.ModelElement.Default;
                }
                set
                {
                    this.ModelElement.Default = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pathMember property
        /// </summary>
        private sealed class PathMemberProxy : ModelPropertyChange<IProject, IPath>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PathMemberProxy(IProject modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPath Value
            {
                get
                {
                    return this.ModelElement.PathMember;
                }
                set
                {
                    this.ModelElement.PathMember = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Property class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Property/")]
    public abstract class Property : ModelElement, IProperty, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Property/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Property/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IProperty, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IProperty modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PropertyName class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyName/")]
    [DebuggerDisplayAttribute("PropertyName {Name}")]
    public class PropertyName : Property, IPropertyName, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyName/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyName/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IPropertyName, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IPropertyName modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PropertyValue class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyValue/")]
    [DebuggerDisplayAttribute("PropertyValue {Name}")]
    public class PropertyValue : PropertyName, IPropertyValue, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyValue/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyValue/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IPropertyValue, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IPropertyValue modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PropertyLocation class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyLocation/")]
    [DebuggerDisplayAttribute("PropertyLocation {Name}")]
    public class PropertyLocation : PropertyName, IPropertyLocation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private string _location;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The location property
        /// </summary>
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        public virtual string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    string old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e);
                    this._location = value;
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyLocation/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOCATION"))
            {
                return this.Location;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATION"))
            {
                this.Location = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyLocation/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IPropertyLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IPropertyLocation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocationChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PropertyFile class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyFile/")]
    public class PropertyFile : Property, IPropertyFile, IModelElement
    {
        
        /// <summary>
        /// The backing field for the File property
        /// </summary>
        private string _file;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The file property
        /// </summary>
        [XmlElementNameAttribute("file")]
        [XmlAttributeAttribute(true)]
        public virtual string File
        {
            get
            {
                return this._file;
            }
            set
            {
                if ((this._file != value))
                {
                    string old = this._file;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFileChanging(e);
                    this.OnPropertyChanging("File", e);
                    this._file = value;
                    this.OnFileChanged(e);
                    this.OnPropertyChanged("File", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyFile/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Raises the FileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FILE"))
            {
                return this.File;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FILE"))
            {
                this.File = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyFile/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the file property
        /// </summary>
        private sealed class FileProxy : ModelPropertyChange<IPropertyFile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileProxy(IPropertyFile modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.File;
                }
                set
                {
                    this.ModelElement.File = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PropertyEnv class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyEnv/")]
    public class PropertyEnv : Property, IPropertyEnv, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Environment property
        /// </summary>
        private string _environment;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The environment property
        /// </summary>
        [XmlElementNameAttribute("environment")]
        [XmlAttributeAttribute(true)]
        public virtual string Environment
        {
            get
            {
                return this._environment;
            }
            set
            {
                if ((this._environment != value))
                {
                    string old = this._environment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnvironmentChanging(e);
                    this.OnPropertyChanging("Environment", e);
                    this._environment = value;
                    this.OnEnvironmentChanged(e);
                    this.OnPropertyChanged("Environment", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyEnv/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Environment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanging;
        
        /// <summary>
        /// Gets fired when the Environment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanged;
        
        /// <summary>
        /// Raises the EnvironmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnvironmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ENVIRONMENT"))
            {
                return this.Environment;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENVIRONMENT"))
            {
                this.Environment = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PropertyEnv/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the environment property
        /// </summary>
        private sealed class EnvironmentProxy : ModelPropertyChange<IPropertyEnv, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnvironmentProxy(IPropertyEnv modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Environment;
                }
                set
                {
                    this.ModelElement.Environment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvironmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvironmentChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Target class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Target/")]
    [DebuggerDisplayAttribute("Target {Name}")]
    public class Target : ModelElement, ITarget, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Description property
        /// </summary>
        private string _description;
        
        /// <summary>
        /// The backing field for the Unless property
        /// </summary>
        private string _unless;
        
        /// <summary>
        /// The backing field for the IfCondition property
        /// </summary>
        private string _ifCondition;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        /// <summary>
        /// The backing field for the Depends property
        /// </summary>
        private ObservableAssociationSet<ITarget> _depends;
        
        /// <summary>
        /// The backing field for the Tasks property
        /// </summary>
        private TargetTasksCollection _tasks;
        
        private static IClass _classInstance;
        
        public Target()
        {
            this._depends = new ObservableAssociationSet<ITarget>();
            this._depends.CollectionChanging += this.DependsCollectionChanging;
            this._depends.CollectionChanged += this.DependsCollectionChanged;
            this._tasks = new TargetTasksCollection(this);
            this._tasks.CollectionChanging += this.TasksCollectionChanging;
            this._tasks.CollectionChanged += this.TasksCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        [XmlElementNameAttribute("description")]
        [XmlAttributeAttribute(true)]
        public virtual string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    string old = this._description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDescriptionChanging(e);
                    this.OnPropertyChanging("Description", e);
                    this._description = value;
                    this.OnDescriptionChanged(e);
                    this.OnPropertyChanged("Description", e);
                }
            }
        }
        
        /// <summary>
        /// The unless property
        /// </summary>
        [XmlElementNameAttribute("unless")]
        [XmlAttributeAttribute(true)]
        public virtual string Unless
        {
            get
            {
                return this._unless;
            }
            set
            {
                if ((this._unless != value))
                {
                    string old = this._unless;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnlessChanging(e);
                    this.OnPropertyChanging("Unless", e);
                    this._unless = value;
                    this.OnUnlessChanged(e);
                    this.OnPropertyChanged("Unless", e);
                }
            }
        }
        
        /// <summary>
        /// The ifCondition property
        /// </summary>
        [XmlElementNameAttribute("ifCondition")]
        [XmlAttributeAttribute(true)]
        public virtual string IfCondition
        {
            get
            {
                return this._ifCondition;
            }
            set
            {
                if ((this._ifCondition != value))
                {
                    string old = this._ifCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIfConditionChanging(e);
                    this.OnPropertyChanging("IfCondition", e);
                    this._ifCondition = value;
                    this.OnIfConditionChanged(e);
                    this.OnPropertyChanged("IfCondition", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// The depends property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("depends")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ISetExpression<ITarget> Depends
        {
            get
            {
                return this._depends;
            }
        }
        
        /// <summary>
        /// The tasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("tasks")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("target")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITask> Tasks
        {
            get
            {
                return this._tasks;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new TargetChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TargetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Target/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Gets fired before the Unless property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnlessChanging;
        
        /// <summary>
        /// Gets fired when the Unless property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnlessChanged;
        
        /// <summary>
        /// Gets fired before the IfCondition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IfConditionChanging;
        
        /// <summary>
        /// Gets fired when the IfCondition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IfConditionChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnlessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnlessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnlessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnlessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnlessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnlessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IfConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIfConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IfConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IfConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIfConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IfConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Depends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Depends", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Depends property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DependsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Depends", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Tasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TasksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Tasks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Tasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Tasks", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int tasksIndex = ModelHelper.IndexOfReference(this.Tasks, element);
            if ((tasksIndex != -1))
            {
                return ModelHelper.CreatePath("tasks", tasksIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "TASKS"))
            {
                if ((index < this.Tasks.Count))
                {
                    return this.Tasks[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "DESCRIPTION"))
            {
                return this.Description;
            }
            if ((attribute == "UNLESS"))
            {
                return this.Unless;
            }
            if ((attribute == "IFCONDITION"))
            {
                return this.IfCondition;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DEPENDS"))
            {
                return this._depends;
            }
            if ((feature == "TASKS"))
            {
                return this._tasks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "DESCRIPTION"))
            {
                this.Description = ((string)(value));
                return;
            }
            if ((feature == "UNLESS"))
            {
                this.Unless = ((string)(value));
                return;
            }
            if ((feature == "IFCONDITION"))
            {
                this.IfCondition = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Target/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Target class
        /// </summary>
        public class TargetChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Target _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TargetChildrenCollection(Target parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Tasks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Tasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Tasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITask tasksCasted = item.As<ITask>();
                if ((tasksCasted != null))
                {
                    this._parent.Tasks.Add(tasksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Tasks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Tasks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tasksEnumerator = this._parent.Tasks.GetEnumerator();
                try
                {
                    for (
                    ; tasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tasksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITask taskItem = item.As<ITask>();
                if (((taskItem != null) 
                            && this._parent.Tasks.Remove(taskItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Tasks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Target class
        /// </summary>
        public class TargetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Target _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TargetReferencedElementsCollection(Target parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Depends.Count);
                    count = (count + this._parent.Tasks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Depends.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Tasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Depends.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Tasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITarget dependsCasted = item.As<ITarget>();
                if ((dependsCasted != null))
                {
                    this._parent.Depends.Add(dependsCasted);
                }
                ITask tasksCasted = item.As<ITask>();
                if ((tasksCasted != null))
                {
                    this._parent.Tasks.Add(tasksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Depends.Clear();
                this._parent.Tasks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Depends.Contains(item))
                {
                    return true;
                }
                if (this._parent.Tasks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> dependsEnumerator = this._parent.Depends.GetEnumerator();
                try
                {
                    for (
                    ; dependsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dependsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dependsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> tasksEnumerator = this._parent.Tasks.GetEnumerator();
                try
                {
                    for (
                    ; tasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tasksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITarget targetItem = item.As<ITarget>();
                if (((targetItem != null) 
                            && this._parent.Depends.Remove(targetItem)))
                {
                    return true;
                }
                ITask taskItem = item.As<ITask>();
                if (((taskItem != null) 
                            && this._parent.Tasks.Remove(taskItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Depends).Concat(this._parent.Tasks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ITarget, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ITarget modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the description property
        /// </summary>
        private sealed class DescriptionProxy : ModelPropertyChange<ITarget, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DescriptionProxy(ITarget modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Description;
                }
                set
                {
                    this.ModelElement.Description = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unless property
        /// </summary>
        private sealed class UnlessProxy : ModelPropertyChange<ITarget, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnlessProxy(ITarget modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Unless;
                }
                set
                {
                    this.ModelElement.Unless = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnlessChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnlessChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ifCondition property
        /// </summary>
        private sealed class IfConditionProxy : ModelPropertyChange<ITarget, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IfConditionProxy(ITarget modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IfCondition;
                }
                set
                {
                    this.ModelElement.IfCondition = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IfConditionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IfConditionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<ITarget, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(ITarget modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Pattern class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Pattern/")]
    public abstract class Pattern : ModelElement, IPattern, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Pattern/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Pattern/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IPattern, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IPattern modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Basic class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Basic/")]
    public abstract class Basic : Pattern, IBasic, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Basic/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Basic/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Mapper class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Mapper/")]
    public class Mapper : Basic, IMapper, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        /// <summary>
        /// The backing field for the Classname property
        /// </summary>
        private string _classname;
        
        /// <summary>
        /// The backing field for the Classpath property
        /// </summary>
        private string _classpath;
        
        /// <summary>
        /// The backing field for the Classpathref property
        /// </summary>
        private string _classpathref;
        
        /// <summary>
        /// The backing field for the From property
        /// </summary>
        private string _from;
        
        /// <summary>
        /// The backing field for the To property
        /// </summary>
        private string _to;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e);
                }
            }
        }
        
        /// <summary>
        /// The classname property
        /// </summary>
        [XmlElementNameAttribute("classname")]
        [XmlAttributeAttribute(true)]
        public virtual string Classname
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    string old = this._classname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassnameChanging(e);
                    this.OnPropertyChanging("Classname", e);
                    this._classname = value;
                    this.OnClassnameChanged(e);
                    this.OnPropertyChanged("Classname", e);
                }
            }
        }
        
        /// <summary>
        /// The classpath property
        /// </summary>
        [XmlElementNameAttribute("classpath")]
        [XmlAttributeAttribute(true)]
        public virtual string Classpath
        {
            get
            {
                return this._classpath;
            }
            set
            {
                if ((this._classpath != value))
                {
                    string old = this._classpath;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClasspathChanging(e);
                    this.OnPropertyChanging("Classpath", e);
                    this._classpath = value;
                    this.OnClasspathChanged(e);
                    this.OnPropertyChanged("Classpath", e);
                }
            }
        }
        
        /// <summary>
        /// The classpathref property
        /// </summary>
        [XmlElementNameAttribute("classpathref")]
        [XmlAttributeAttribute(true)]
        public virtual string Classpathref
        {
            get
            {
                return this._classpathref;
            }
            set
            {
                if ((this._classpathref != value))
                {
                    string old = this._classpathref;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClasspathrefChanging(e);
                    this.OnPropertyChanging("Classpathref", e);
                    this._classpathref = value;
                    this.OnClasspathrefChanged(e);
                    this.OnPropertyChanged("Classpathref", e);
                }
            }
        }
        
        /// <summary>
        /// The from property
        /// </summary>
        [XmlElementNameAttribute("from")]
        [XmlAttributeAttribute(true)]
        public virtual string From
        {
            get
            {
                return this._from;
            }
            set
            {
                if ((this._from != value))
                {
                    string old = this._from;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromChanging(e);
                    this.OnPropertyChanging("From", e);
                    this._from = value;
                    this.OnFromChanged(e);
                    this.OnPropertyChanged("From", e);
                }
            }
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        [XmlElementNameAttribute("to")]
        [XmlAttributeAttribute(true)]
        public virtual string To
        {
            get
            {
                return this._to;
            }
            set
            {
                if ((this._to != value))
                {
                    string old = this._to;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToChanging(e);
                    this.OnPropertyChanging("To", e);
                    this._to = value;
                    this.OnToChanged(e);
                    this.OnPropertyChanged("To", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Mapper/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the Classpath property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClasspathChanging;
        
        /// <summary>
        /// Gets fired when the Classpath property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClasspathChanged;
        
        /// <summary>
        /// Gets fired before the Classpathref property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClasspathrefChanging;
        
        /// <summary>
        /// Gets fired when the Classpathref property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClasspathrefChanged;
        
        /// <summary>
        /// Gets fired before the From property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromChanging;
        
        /// <summary>
        /// Gets fired when the From property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromChanged;
        
        /// <summary>
        /// Gets fired before the To property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToChanging;
        
        /// <summary>
        /// Gets fired when the To property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToChanged;
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClasspathChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClasspathChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClasspathChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClasspathChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClasspathChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClasspathChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClasspathrefChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClasspathrefChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClasspathrefChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClasspathrefChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClasspathrefChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClasspathrefChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "CLASSNAME"))
            {
                return this.Classname;
            }
            if ((attribute == "CLASSPATH"))
            {
                return this.Classpath;
            }
            if ((attribute == "CLASSPATHREF"))
            {
                return this.Classpathref;
            }
            if ((attribute == "FROM"))
            {
                return this.From;
            }
            if ((attribute == "TO"))
            {
                return this.To;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "CLASSNAME"))
            {
                this.Classname = ((string)(value));
                return;
            }
            if ((feature == "CLASSPATH"))
            {
                this.Classpath = ((string)(value));
                return;
            }
            if ((feature == "CLASSPATHREF"))
            {
                this.Classpathref = ((string)(value));
                return;
            }
            if ((feature == "FROM"))
            {
                this.From = ((string)(value));
                return;
            }
            if ((feature == "TO"))
            {
                this.To = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Mapper/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classname property
        /// </summary>
        private sealed class ClassnameProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassnameProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classname;
                }
                set
                {
                    this.ModelElement.Classname = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classpath property
        /// </summary>
        private sealed class ClasspathProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClasspathProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classpath;
                }
                set
                {
                    this.ModelElement.Classpath = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClasspathChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClasspathChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classpathref property
        /// </summary>
        private sealed class ClasspathrefProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClasspathrefProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classpathref;
                }
                set
                {
                    this.ModelElement.Classpathref = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClasspathrefChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClasspathrefChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the from property
        /// </summary>
        private sealed class FromProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.From;
                }
                set
                {
                    this.ModelElement.From = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FromChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FromChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the to property
        /// </summary>
        private sealed class ToProxy : ModelPropertyChange<IMapper, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToProxy(IMapper modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.To;
                }
                set
                {
                    this.ModelElement.To = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ToChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ToChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the InExcludes class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//InExcludes/")]
    [DebuggerDisplayAttribute("InExcludes {Name}")]
    public abstract class InExcludes : Basic, IInExcludes, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the IfCondition property
        /// </summary>
        private string _ifCondition;
        
        /// <summary>
        /// The backing field for the Unless property
        /// </summary>
        private string _unless;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The ifCondition property
        /// </summary>
        [XmlElementNameAttribute("ifCondition")]
        [XmlAttributeAttribute(true)]
        public virtual string IfCondition
        {
            get
            {
                return this._ifCondition;
            }
            set
            {
                if ((this._ifCondition != value))
                {
                    string old = this._ifCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIfConditionChanging(e);
                    this.OnPropertyChanging("IfCondition", e);
                    this._ifCondition = value;
                    this.OnIfConditionChanged(e);
                    this.OnPropertyChanged("IfCondition", e);
                }
            }
        }
        
        /// <summary>
        /// The unless property
        /// </summary>
        [XmlElementNameAttribute("unless")]
        [XmlAttributeAttribute(true)]
        public virtual string Unless
        {
            get
            {
                return this._unless;
            }
            set
            {
                if ((this._unless != value))
                {
                    string old = this._unless;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnlessChanging(e);
                    this.OnPropertyChanging("Unless", e);
                    this._unless = value;
                    this.OnUnlessChanged(e);
                    this.OnPropertyChanged("Unless", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//InExcludes/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the IfCondition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IfConditionChanging;
        
        /// <summary>
        /// Gets fired when the IfCondition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IfConditionChanged;
        
        /// <summary>
        /// Gets fired before the Unless property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnlessChanging;
        
        /// <summary>
        /// Gets fired when the Unless property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnlessChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IfConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIfConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IfConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IfConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIfConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IfConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnlessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnlessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnlessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnlessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnlessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnlessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "IFCONDITION"))
            {
                return this.IfCondition;
            }
            if ((attribute == "UNLESS"))
            {
                return this.Unless;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "IFCONDITION"))
            {
                this.IfCondition = ((string)(value));
                return;
            }
            if ((feature == "UNLESS"))
            {
                this.Unless = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//InExcludes/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IInExcludes, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IInExcludes modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ifCondition property
        /// </summary>
        private sealed class IfConditionProxy : ModelPropertyChange<IInExcludes, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IfConditionProxy(IInExcludes modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IfCondition;
                }
                set
                {
                    this.ModelElement.IfCondition = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IfConditionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IfConditionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unless property
        /// </summary>
        private sealed class UnlessProxy : ModelPropertyChange<IInExcludes, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnlessProxy(IInExcludes modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Unless;
                }
                set
                {
                    this.ModelElement.Unless = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnlessChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnlessChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Includes class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Includes/")]
    [DebuggerDisplayAttribute("Includes {Name}")]
    public class Includes : InExcludes, IIncludes, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Includes/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Includes/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Excludes class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Excludes/")]
    [DebuggerDisplayAttribute("Excludes {Name}")]
    public class Excludes : InExcludes, IExcludes, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Excludes/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Excludes/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the IncludesFile class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//IncludesFile/")]
    [DebuggerDisplayAttribute("IncludesFile {Name}")]
    public class IncludesFile : InExcludes, IIncludesFile, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//IncludesFile/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//IncludesFile/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the ExcludesFile class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//ExcludesFile/")]
    [DebuggerDisplayAttribute("ExcludesFile {Name}")]
    public class ExcludesFile : InExcludes, IExcludesFile, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ExcludesFile/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ExcludesFile/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the FileList class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FileList/")]
    public class FileList : Basic, IFileList, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private string _dir;
        
        /// <summary>
        /// The backing field for the Files property
        /// </summary>
        private string _files;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The dir property
        /// </summary>
        [XmlElementNameAttribute("dir")]
        [XmlAttributeAttribute(true)]
        public virtual string Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    string old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// The files property
        /// </summary>
        [XmlElementNameAttribute("files")]
        [XmlAttributeAttribute(true)]
        public virtual string Files
        {
            get
            {
                return this._files;
            }
            set
            {
                if ((this._files != value))
                {
                    string old = this._files;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilesChanging(e);
                    this.OnPropertyChanging("Files", e);
                    this._files = value;
                    this.OnFilesChanged(e);
                    this.OnPropertyChanged("Files", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileList/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Gets fired before the Files property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilesChanging;
        
        /// <summary>
        /// Gets fired when the Files property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilesChanged;
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DIR"))
            {
                return this.Dir;
            }
            if ((attribute == "FILES"))
            {
                return this.Files;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DIR"))
            {
                this.Dir = ((string)(value));
                return;
            }
            if ((feature == "FILES"))
            {
                this.Files = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileList/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IFileList, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IFileList modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the files property
        /// </summary>
        private sealed class FilesProxy : ModelPropertyChange<IFileList, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilesProxy(IFileList modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Files;
                }
                set
                {
                    this.ModelElement.Files = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilesChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Filter class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Filter/")]
    public class Filter : Basic, IFilter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Token property
        /// </summary>
        private string _token;
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The token property
        /// </summary>
        [XmlElementNameAttribute("token")]
        [XmlAttributeAttribute(true)]
        public virtual string Token
        {
            get
            {
                return this._token;
            }
            set
            {
                if ((this._token != value))
                {
                    string old = this._token;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTokenChanging(e);
                    this.OnPropertyChanging("Token", e);
                    this._token = value;
                    this.OnTokenChanged(e);
                    this.OnPropertyChanged("Token", e);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Filter/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Token property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TokenChanging;
        
        /// <summary>
        /// Gets fired when the Token property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TokenChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Raises the TokenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTokenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TokenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TokenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTokenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TokenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TOKEN"))
            {
                return this.Token;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOKEN"))
            {
                this.Token = ((string)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Filter/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the token property
        /// </summary>
        private sealed class TokenProxy : ModelPropertyChange<IFilter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TokenProxy(IFilter modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Token;
                }
                set
                {
                    this.ModelElement.Token = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TokenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TokenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IFilter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IFilter modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FiltersFile class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FiltersFile/")]
    public class FiltersFile : Basic, IFiltersFile, IModelElement
    {
        
        /// <summary>
        /// The backing field for the File property
        /// </summary>
        private string _file;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The file property
        /// </summary>
        [XmlElementNameAttribute("file")]
        [XmlAttributeAttribute(true)]
        public virtual string File
        {
            get
            {
                return this._file;
            }
            set
            {
                if ((this._file != value))
                {
                    string old = this._file;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFileChanging(e);
                    this.OnPropertyChanging("File", e);
                    this._file = value;
                    this.OnFileChanged(e);
                    this.OnPropertyChanged("File", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FiltersFile/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Raises the FileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FILE"))
            {
                return this.File;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FILE"))
            {
                this.File = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FiltersFile/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the file property
        /// </summary>
        private sealed class FileProxy : ModelPropertyChange<IFiltersFile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileProxy(IFiltersFile modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.File;
                }
                set
                {
                    this.ModelElement.File = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PathElement class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PathElement/")]
    public class PathElement : Basic, IPathElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PathMember property
        /// </summary>
        private string _pathMember;
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private string _location;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        [XmlElementNameAttribute("pathMember")]
        [XmlAttributeAttribute(true)]
        public virtual string PathMember
        {
            get
            {
                return this._pathMember;
            }
            set
            {
                if ((this._pathMember != value))
                {
                    string old = this._pathMember;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPathMemberChanging(e);
                    this.OnPropertyChanging("PathMember", e);
                    this._pathMember = value;
                    this.OnPathMemberChanged(e);
                    this.OnPropertyChanged("PathMember", e);
                }
            }
        }
        
        /// <summary>
        /// The location property
        /// </summary>
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        public virtual string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    string old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e);
                    this._location = value;
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PathElement/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Raises the PathMemberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathMemberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PATHMEMBER"))
            {
                return this.PathMember;
            }
            if ((attribute == "LOCATION"))
            {
                return this.Location;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PATHMEMBER"))
            {
                this.PathMember = ((string)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PathElement/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pathMember property
        /// </summary>
        private sealed class PathMemberProxy : ModelPropertyChange<IPathElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PathMemberProxy(IPathElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PathMember;
                }
                set
                {
                    this.ModelElement.PathMember = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IPathElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IPathElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocationChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Set class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Set/")]
    public abstract class Set : Pattern, ISet, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Set/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Set/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the PatternSet class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PatternSet/")]
    public class PatternSet : Set, IPatternSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Inexcludes property
        /// </summary>
        private ObservableCompositionSet<IInExcludes> _inexcludes;
        
        private static IClass _classInstance;
        
        public PatternSet()
        {
            this._inexcludes = new ObservableCompositionSet<IInExcludes>(this);
            this._inexcludes.CollectionChanging += this.InexcludesCollectionChanging;
            this._inexcludes.CollectionChanged += this.InexcludesCollectionChanged;
        }
        
        /// <summary>
        /// The inexcludes property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("inexcludes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IInExcludes> Inexcludes
        {
            get
            {
                return this._inexcludes;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PatternSetChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PatternSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PatternSet/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Inexcludes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InexcludesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Inexcludes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Inexcludes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InexcludesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Inexcludes", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INEXCLUDES"))
            {
                return this._inexcludes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PatternSet/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PatternSet class
        /// </summary>
        public class PatternSetChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PatternSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PatternSetChildrenCollection(PatternSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Inexcludes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Inexcludes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Inexcludes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInExcludes inexcludesCasted = item.As<IInExcludes>();
                if ((inexcludesCasted != null))
                {
                    this._parent.Inexcludes.Add(inexcludesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Inexcludes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Inexcludes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inexcludesEnumerator = this._parent.Inexcludes.GetEnumerator();
                try
                {
                    for (
                    ; inexcludesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inexcludesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inexcludesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInExcludes inExcludesItem = item.As<IInExcludes>();
                if (((inExcludesItem != null) 
                            && this._parent.Inexcludes.Remove(inExcludesItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Inexcludes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PatternSet class
        /// </summary>
        public class PatternSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PatternSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PatternSetReferencedElementsCollection(PatternSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Inexcludes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Inexcludes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Inexcludes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInExcludes inexcludesCasted = item.As<IInExcludes>();
                if ((inexcludesCasted != null))
                {
                    this._parent.Inexcludes.Add(inexcludesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Inexcludes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Inexcludes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inexcludesEnumerator = this._parent.Inexcludes.GetEnumerator();
                try
                {
                    for (
                    ; inexcludesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inexcludesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inexcludesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInExcludes inExcludesItem = item.As<IInExcludes>();
                if (((inExcludesItem != null) 
                            && this._parent.Inexcludes.Remove(inExcludesItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Inexcludes).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FileSet class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FileSet/")]
    public class FileSet : Set, IFileSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private string _dir;
        
        /// <summary>
        /// The backing field for the Patternset property
        /// </summary>
        private ObservableCompositionSet<IPatternSet> _patternset;
        
        /// <summary>
        /// The backing field for the Include property
        /// </summary>
        private ObservableCompositionSet<IIncludes> _include;
        
        /// <summary>
        /// The backing field for the Exclude property
        /// </summary>
        private ObservableCompositionSet<IExcludes> _exclude;
        
        private static IClass _classInstance;
        
        public FileSet()
        {
            this._patternset = new ObservableCompositionSet<IPatternSet>(this);
            this._patternset.CollectionChanging += this.PatternsetCollectionChanging;
            this._patternset.CollectionChanged += this.PatternsetCollectionChanged;
            this._include = new ObservableCompositionSet<IIncludes>(this);
            this._include.CollectionChanging += this.IncludeCollectionChanging;
            this._include.CollectionChanged += this.IncludeCollectionChanged;
            this._exclude = new ObservableCompositionSet<IExcludes>(this);
            this._exclude.CollectionChanging += this.ExcludeCollectionChanging;
            this._exclude.CollectionChanged += this.ExcludeCollectionChanged;
        }
        
        /// <summary>
        /// The dir property
        /// </summary>
        [XmlElementNameAttribute("dir")]
        [XmlAttributeAttribute(true)]
        public virtual string Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    string old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// The patternset property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("patternset")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IPatternSet> Patternset
        {
            get
            {
                return this._patternset;
            }
        }
        
        /// <summary>
        /// The include property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("include")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IIncludes> Include
        {
            get
            {
                return this._include;
            }
        }
        
        /// <summary>
        /// The exclude property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("exclude")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IExcludes> Exclude
        {
            get
            {
                return this._exclude;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FileSetChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FileSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileSet/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Patternset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PatternsetCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Patternset", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Patternset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PatternsetCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Patternset", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Include property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludeCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Include", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Include property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncludeCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Include", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Exclude property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExcludeCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Exclude", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Exclude property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExcludeCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Exclude", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DIR"))
            {
                return this.Dir;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PATTERNSET"))
            {
                return this._patternset;
            }
            if ((feature == "INCLUDE"))
            {
                return this._include;
            }
            if ((feature == "EXCLUDE"))
            {
                return this._exclude;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DIR"))
            {
                this.Dir = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileSet/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FileSet class
        /// </summary>
        public class FileSetChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FileSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FileSetChildrenCollection(FileSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Patternset.Count);
                    count = (count + this._parent.Include.Count);
                    count = (count + this._parent.Exclude.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Patternset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Exclude.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Patternset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Exclude.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPatternSet patternsetCasted = item.As<IPatternSet>();
                if ((patternsetCasted != null))
                {
                    this._parent.Patternset.Add(patternsetCasted);
                }
                IIncludes includeCasted = item.As<IIncludes>();
                if ((includeCasted != null))
                {
                    this._parent.Include.Add(includeCasted);
                }
                IExcludes excludeCasted = item.As<IExcludes>();
                if ((excludeCasted != null))
                {
                    this._parent.Exclude.Add(excludeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Patternset.Clear();
                this._parent.Include.Clear();
                this._parent.Exclude.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Patternset.Contains(item))
                {
                    return true;
                }
                if (this._parent.Include.Contains(item))
                {
                    return true;
                }
                if (this._parent.Exclude.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> patternsetEnumerator = this._parent.Patternset.GetEnumerator();
                try
                {
                    for (
                    ; patternsetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = patternsetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    patternsetEnumerator.Dispose();
                }
                IEnumerator<IModelElement> includeEnumerator = this._parent.Include.GetEnumerator();
                try
                {
                    for (
                    ; includeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = includeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    includeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> excludeEnumerator = this._parent.Exclude.GetEnumerator();
                try
                {
                    for (
                    ; excludeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = excludeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    excludeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPatternSet patternSetItem = item.As<IPatternSet>();
                if (((patternSetItem != null) 
                            && this._parent.Patternset.Remove(patternSetItem)))
                {
                    return true;
                }
                IIncludes includesItem = item.As<IIncludes>();
                if (((includesItem != null) 
                            && this._parent.Include.Remove(includesItem)))
                {
                    return true;
                }
                IExcludes excludesItem = item.As<IExcludes>();
                if (((excludesItem != null) 
                            && this._parent.Exclude.Remove(excludesItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Patternset).Concat(this._parent.Include).Concat(this._parent.Exclude).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FileSet class
        /// </summary>
        public class FileSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FileSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FileSetReferencedElementsCollection(FileSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Patternset.Count);
                    count = (count + this._parent.Include.Count);
                    count = (count + this._parent.Exclude.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Patternset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Exclude.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Patternset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Include.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Exclude.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPatternSet patternsetCasted = item.As<IPatternSet>();
                if ((patternsetCasted != null))
                {
                    this._parent.Patternset.Add(patternsetCasted);
                }
                IIncludes includeCasted = item.As<IIncludes>();
                if ((includeCasted != null))
                {
                    this._parent.Include.Add(includeCasted);
                }
                IExcludes excludeCasted = item.As<IExcludes>();
                if ((excludeCasted != null))
                {
                    this._parent.Exclude.Add(excludeCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Patternset.Clear();
                this._parent.Include.Clear();
                this._parent.Exclude.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Patternset.Contains(item))
                {
                    return true;
                }
                if (this._parent.Include.Contains(item))
                {
                    return true;
                }
                if (this._parent.Exclude.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> patternsetEnumerator = this._parent.Patternset.GetEnumerator();
                try
                {
                    for (
                    ; patternsetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = patternsetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    patternsetEnumerator.Dispose();
                }
                IEnumerator<IModelElement> includeEnumerator = this._parent.Include.GetEnumerator();
                try
                {
                    for (
                    ; includeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = includeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    includeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> excludeEnumerator = this._parent.Exclude.GetEnumerator();
                try
                {
                    for (
                    ; excludeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = excludeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    excludeEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPatternSet patternSetItem = item.As<IPatternSet>();
                if (((patternSetItem != null) 
                            && this._parent.Patternset.Remove(patternSetItem)))
                {
                    return true;
                }
                IIncludes includesItem = item.As<IIncludes>();
                if (((includesItem != null) 
                            && this._parent.Include.Remove(includesItem)))
                {
                    return true;
                }
                IExcludes excludesItem = item.As<IExcludes>();
                if (((excludesItem != null) 
                            && this._parent.Exclude.Remove(excludesItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Patternset).Concat(this._parent.Include).Concat(this._parent.Exclude).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IFileSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IFileSet modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FilterSet class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FilterSet/")]
    public class FilterSet : Set, IFilterSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Starttoken property
        /// </summary>
        private string _starttoken;
        
        /// <summary>
        /// The backing field for the Endtoken property
        /// </summary>
        private string _endtoken;
        
        /// <summary>
        /// The backing field for the Filter property
        /// </summary>
        private ObservableCompositionSet<IFilter> _filter;
        
        /// <summary>
        /// The backing field for the Filtersfile property
        /// </summary>
        private ObservableCompositionSet<IFiltersFile> _filtersfile;
        
        private static IClass _classInstance;
        
        public FilterSet()
        {
            this._filter = new ObservableCompositionSet<IFilter>(this);
            this._filter.CollectionChanging += this.FilterCollectionChanging;
            this._filter.CollectionChanged += this.FilterCollectionChanged;
            this._filtersfile = new ObservableCompositionSet<IFiltersFile>(this);
            this._filtersfile.CollectionChanging += this.FiltersfileCollectionChanging;
            this._filtersfile.CollectionChanged += this.FiltersfileCollectionChanged;
        }
        
        /// <summary>
        /// The starttoken property
        /// </summary>
        [XmlElementNameAttribute("starttoken")]
        [XmlAttributeAttribute(true)]
        public virtual string Starttoken
        {
            get
            {
                return this._starttoken;
            }
            set
            {
                if ((this._starttoken != value))
                {
                    string old = this._starttoken;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStarttokenChanging(e);
                    this.OnPropertyChanging("Starttoken", e);
                    this._starttoken = value;
                    this.OnStarttokenChanged(e);
                    this.OnPropertyChanged("Starttoken", e);
                }
            }
        }
        
        /// <summary>
        /// The endtoken property
        /// </summary>
        [XmlElementNameAttribute("endtoken")]
        [XmlAttributeAttribute(true)]
        public virtual string Endtoken
        {
            get
            {
                return this._endtoken;
            }
            set
            {
                if ((this._endtoken != value))
                {
                    string old = this._endtoken;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndtokenChanging(e);
                    this.OnPropertyChanging("Endtoken", e);
                    this._endtoken = value;
                    this.OnEndtokenChanged(e);
                    this.OnPropertyChanged("Endtoken", e);
                }
            }
        }
        
        /// <summary>
        /// The filter property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("filter")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IFilter> Filter
        {
            get
            {
                return this._filter;
            }
        }
        
        /// <summary>
        /// The filtersfile property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("filtersfile")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IFiltersFile> Filtersfile
        {
            get
            {
                return this._filtersfile;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new FilterSetChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FilterSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FilterSet/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Starttoken property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StarttokenChanging;
        
        /// <summary>
        /// Gets fired when the Starttoken property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StarttokenChanged;
        
        /// <summary>
        /// Gets fired before the Endtoken property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndtokenChanging;
        
        /// <summary>
        /// Gets fired when the Endtoken property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndtokenChanged;
        
        /// <summary>
        /// Raises the StarttokenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStarttokenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StarttokenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StarttokenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStarttokenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StarttokenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndtokenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndtokenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndtokenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndtokenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndtokenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndtokenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Filter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilterCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Filter", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Filter property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilterCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Filter", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Filtersfile property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FiltersfileCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Filtersfile", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Filtersfile property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FiltersfileCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Filtersfile", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STARTTOKEN"))
            {
                return this.Starttoken;
            }
            if ((attribute == "ENDTOKEN"))
            {
                return this.Endtoken;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FILTER"))
            {
                return this._filter;
            }
            if ((feature == "FILTERSFILE"))
            {
                return this._filtersfile;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STARTTOKEN"))
            {
                this.Starttoken = ((string)(value));
                return;
            }
            if ((feature == "ENDTOKEN"))
            {
                this.Endtoken = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FilterSet/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FilterSet class
        /// </summary>
        public class FilterSetChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FilterSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FilterSetChildrenCollection(FilterSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Filter.Count);
                    count = (count + this._parent.Filtersfile.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Filter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Filtersfile.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Filter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Filtersfile.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFilter filterCasted = item.As<IFilter>();
                if ((filterCasted != null))
                {
                    this._parent.Filter.Add(filterCasted);
                }
                IFiltersFile filtersfileCasted = item.As<IFiltersFile>();
                if ((filtersfileCasted != null))
                {
                    this._parent.Filtersfile.Add(filtersfileCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Filter.Clear();
                this._parent.Filtersfile.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Filter.Contains(item))
                {
                    return true;
                }
                if (this._parent.Filtersfile.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> filterEnumerator = this._parent.Filter.GetEnumerator();
                try
                {
                    for (
                    ; filterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filtersfileEnumerator = this._parent.Filtersfile.GetEnumerator();
                try
                {
                    for (
                    ; filtersfileEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filtersfileEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filtersfileEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFilter filterItem = item.As<IFilter>();
                if (((filterItem != null) 
                            && this._parent.Filter.Remove(filterItem)))
                {
                    return true;
                }
                IFiltersFile filtersFileItem = item.As<IFiltersFile>();
                if (((filtersFileItem != null) 
                            && this._parent.Filtersfile.Remove(filtersFileItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Filter).Concat(this._parent.Filtersfile).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FilterSet class
        /// </summary>
        public class FilterSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FilterSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FilterSetReferencedElementsCollection(FilterSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Filter.Count);
                    count = (count + this._parent.Filtersfile.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Filter.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Filtersfile.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Filter.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Filtersfile.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFilter filterCasted = item.As<IFilter>();
                if ((filterCasted != null))
                {
                    this._parent.Filter.Add(filterCasted);
                }
                IFiltersFile filtersfileCasted = item.As<IFiltersFile>();
                if ((filtersfileCasted != null))
                {
                    this._parent.Filtersfile.Add(filtersfileCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Filter.Clear();
                this._parent.Filtersfile.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Filter.Contains(item))
                {
                    return true;
                }
                if (this._parent.Filtersfile.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> filterEnumerator = this._parent.Filter.GetEnumerator();
                try
                {
                    for (
                    ; filterEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filterEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filterEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filtersfileEnumerator = this._parent.Filtersfile.GetEnumerator();
                try
                {
                    for (
                    ; filtersfileEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filtersfileEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filtersfileEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFilter filterItem = item.As<IFilter>();
                if (((filterItem != null) 
                            && this._parent.Filter.Remove(filterItem)))
                {
                    return true;
                }
                IFiltersFile filtersFileItem = item.As<IFiltersFile>();
                if (((filtersFileItem != null) 
                            && this._parent.Filtersfile.Remove(filtersFileItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Filter).Concat(this._parent.Filtersfile).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the starttoken property
        /// </summary>
        private sealed class StarttokenProxy : ModelPropertyChange<IFilterSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StarttokenProxy(IFilterSet modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Starttoken;
                }
                set
                {
                    this.ModelElement.Starttoken = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StarttokenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StarttokenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the endtoken property
        /// </summary>
        private sealed class EndtokenProxy : ModelPropertyChange<IFilterSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndtokenProxy(IFilterSet modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Endtoken;
                }
                set
                {
                    this.ModelElement.Endtoken = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndtokenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndtokenChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Path class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Path/")]
    public class Path : Set, IPath, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the Refid property
        /// </summary>
        private string _refid;
        
        /// <summary>
        /// The backing field for the PathMember property
        /// </summary>
        private IPath _pathMember;
        
        /// <summary>
        /// The backing field for the PathElement property
        /// </summary>
        private ObservableCompositionSet<IPathElement> _pathElement;
        
        /// <summary>
        /// The backing field for the Fileset property
        /// </summary>
        private ObservableCompositionSet<IFileSet> _fileset;
        
        private static IClass _classInstance;
        
        public Path()
        {
            this._pathElement = new ObservableCompositionSet<IPathElement>(this);
            this._pathElement.CollectionChanging += this.PathElementCollectionChanging;
            this._pathElement.CollectionChanged += this.PathElementCollectionChanged;
            this._fileset = new ObservableCompositionSet<IFileSet>(this);
            this._fileset.CollectionChanging += this.FilesetCollectionChanging;
            this._fileset.CollectionChanged += this.FilesetCollectionChanged;
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The refid property
        /// </summary>
        [XmlElementNameAttribute("refid")]
        [XmlAttributeAttribute(true)]
        public virtual string Refid
        {
            get
            {
                return this._refid;
            }
            set
            {
                if ((this._refid != value))
                {
                    string old = this._refid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefidChanging(e);
                    this.OnPropertyChanging("Refid", e);
                    this._refid = value;
                    this.OnRefidChanged(e);
                    this.OnPropertyChanged("Refid", e);
                }
            }
        }
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        [XmlElementNameAttribute("pathMember")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IPath PathMember
        {
            get
            {
                return this._pathMember;
            }
            set
            {
                if ((this._pathMember != value))
                {
                    IPath old = this._pathMember;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPathMemberChanging(e);
                    this.OnPropertyChanging("PathMember", e);
                    this._pathMember = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetPathMember;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetPathMember;
                    }
                    this.OnPathMemberChanged(e);
                    this.OnPropertyChanged("PathMember", e);
                }
            }
        }
        
        /// <summary>
        /// The pathElement property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("pathElement")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IPathElement> PathElement
        {
            get
            {
                return this._pathElement;
            }
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("fileset")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IFileSet> Fileset
        {
            get
            {
                return this._fileset;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PathChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PathReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Path/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Refid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefidChanging;
        
        /// <summary>
        /// Gets fired when the Refid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefidChanged;
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefidChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefidChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefidChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefidChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefidChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefidChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathMemberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PathMemberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPathMemberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PathMemberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PathMember property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPathMember(object sender, System.EventArgs eventArgs)
        {
            this.PathMember = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PathElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PathElementCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PathElement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PathElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PathElementCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PathElement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Fileset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilesetCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Fileset", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Fileset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilesetCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Fileset", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.PathMember))
            {
                return ModelHelper.CreatePath("PathMember");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PATHMEMBER"))
            {
                return this.PathMember;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "REFID"))
            {
                return this.Refid;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PATHELEMENT"))
            {
                return this._pathElement;
            }
            if ((feature == "FILESET"))
            {
                return this._fileset;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PATHMEMBER"))
            {
                this.PathMember = ((IPath)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "REFID"))
            {
                this.Refid = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PathMember"))
            {
                return new PathMemberProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PathMember"))
            {
                return new PathMemberProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Path/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Path class
        /// </summary>
        public class PathChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Path _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PathChildrenCollection(Path parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PathMember != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PathElement.Count);
                    count = (count + this._parent.Fileset.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PathMemberChanged += this.PropagateValueChanges;
                this._parent.PathElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PathMemberChanged -= this.PropagateValueChanges;
                this._parent.PathElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PathMember == null))
                {
                    IPath pathMemberCasted = item.As<IPath>();
                    if ((pathMemberCasted != null))
                    {
                        this._parent.PathMember = pathMemberCasted;
                        return;
                    }
                }
                IPathElement pathElementCasted = item.As<IPathElement>();
                if ((pathElementCasted != null))
                {
                    this._parent.PathElement.Add(pathElementCasted);
                }
                IFileSet filesetCasted = item.As<IFileSet>();
                if ((filesetCasted != null))
                {
                    this._parent.Fileset.Add(filesetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PathMember = null;
                this._parent.PathElement.Clear();
                this._parent.Fileset.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PathMember))
                {
                    return true;
                }
                if (this._parent.PathElement.Contains(item))
                {
                    return true;
                }
                if (this._parent.Fileset.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PathMember != null))
                {
                    array[arrayIndex] = this._parent.PathMember;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> pathElementEnumerator = this._parent.PathElement.GetEnumerator();
                try
                {
                    for (
                    ; pathElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pathElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pathElementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filesetEnumerator = this._parent.Fileset.GetEnumerator();
                try
                {
                    for (
                    ; filesetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filesetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filesetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PathMember == item))
                {
                    this._parent.PathMember = null;
                    return true;
                }
                IPathElement pathElementItem = item.As<IPathElement>();
                if (((pathElementItem != null) 
                            && this._parent.PathElement.Remove(pathElementItem)))
                {
                    return true;
                }
                IFileSet fileSetItem = item.As<IFileSet>();
                if (((fileSetItem != null) 
                            && this._parent.Fileset.Remove(fileSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PathMember).Concat(this._parent.PathElement).Concat(this._parent.Fileset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Path class
        /// </summary>
        public class PathReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Path _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PathReferencedElementsCollection(Path parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PathMember != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PathElement.Count);
                    count = (count + this._parent.Fileset.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PathMemberChanged += this.PropagateValueChanges;
                this._parent.PathElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PathMemberChanged -= this.PropagateValueChanges;
                this._parent.PathElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PathMember == null))
                {
                    IPath pathMemberCasted = item.As<IPath>();
                    if ((pathMemberCasted != null))
                    {
                        this._parent.PathMember = pathMemberCasted;
                        return;
                    }
                }
                IPathElement pathElementCasted = item.As<IPathElement>();
                if ((pathElementCasted != null))
                {
                    this._parent.PathElement.Add(pathElementCasted);
                }
                IFileSet filesetCasted = item.As<IFileSet>();
                if ((filesetCasted != null))
                {
                    this._parent.Fileset.Add(filesetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PathMember = null;
                this._parent.PathElement.Clear();
                this._parent.Fileset.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PathMember))
                {
                    return true;
                }
                if (this._parent.PathElement.Contains(item))
                {
                    return true;
                }
                if (this._parent.Fileset.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PathMember != null))
                {
                    array[arrayIndex] = this._parent.PathMember;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> pathElementEnumerator = this._parent.PathElement.GetEnumerator();
                try
                {
                    for (
                    ; pathElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pathElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pathElementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filesetEnumerator = this._parent.Fileset.GetEnumerator();
                try
                {
                    for (
                    ; filesetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filesetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filesetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PathMember == item))
                {
                    this._parent.PathMember = null;
                    return true;
                }
                IPathElement pathElementItem = item.As<IPathElement>();
                if (((pathElementItem != null) 
                            && this._parent.PathElement.Remove(pathElementItem)))
                {
                    return true;
                }
                IFileSet fileSetItem = item.As<IFileSet>();
                if (((fileSetItem != null) 
                            && this._parent.Fileset.Remove(fileSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PathMember).Concat(this._parent.PathElement).Concat(this._parent.Fileset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IPath, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IPath modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the refid property
        /// </summary>
        private sealed class RefidProxy : ModelPropertyChange<IPath, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefidProxy(IPath modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Refid;
                }
                set
                {
                    this.ModelElement.Refid = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefidChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefidChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pathMember property
        /// </summary>
        private sealed class PathMemberProxy : ModelPropertyChange<IPath, IPath>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PathMemberProxy(IPath modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPath Value
            {
                get
                {
                    return this.ModelElement.PathMember;
                }
                set
                {
                    this.ModelElement.PathMember = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PathMemberChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ClassPath class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//ClassPath/")]
    public class ClassPath : Set, IClassPath, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Refid property
        /// </summary>
        private string _refid;
        
        /// <summary>
        /// The backing field for the PathElement property
        /// </summary>
        private ObservableCompositionSet<IPathElement> _pathElement;
        
        /// <summary>
        /// The backing field for the Fileset property
        /// </summary>
        private ObservableCompositionSet<IFileSet> _fileset;
        
        private static IClass _classInstance;
        
        public ClassPath()
        {
            this._pathElement = new ObservableCompositionSet<IPathElement>(this);
            this._pathElement.CollectionChanging += this.PathElementCollectionChanging;
            this._pathElement.CollectionChanged += this.PathElementCollectionChanged;
            this._fileset = new ObservableCompositionSet<IFileSet>(this);
            this._fileset.CollectionChanging += this.FilesetCollectionChanging;
            this._fileset.CollectionChanged += this.FilesetCollectionChanged;
        }
        
        /// <summary>
        /// The refid property
        /// </summary>
        [XmlElementNameAttribute("refid")]
        [XmlAttributeAttribute(true)]
        public virtual string Refid
        {
            get
            {
                return this._refid;
            }
            set
            {
                if ((this._refid != value))
                {
                    string old = this._refid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefidChanging(e);
                    this.OnPropertyChanging("Refid", e);
                    this._refid = value;
                    this.OnRefidChanged(e);
                    this.OnPropertyChanged("Refid", e);
                }
            }
        }
        
        /// <summary>
        /// The pathElement property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("pathElement")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IPathElement> PathElement
        {
            get
            {
                return this._pathElement;
            }
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("fileset")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IFileSet> Fileset
        {
            get
            {
                return this._fileset;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassPathChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassPathReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ClassPath/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Refid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefidChanging;
        
        /// <summary>
        /// Gets fired when the Refid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefidChanged;
        
        /// <summary>
        /// Raises the RefidChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefidChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefidChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefidChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefidChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefidChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PathElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PathElementCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PathElement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PathElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PathElementCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PathElement", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Fileset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilesetCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Fileset", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Fileset property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FilesetCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Fileset", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REFID"))
            {
                return this.Refid;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PATHELEMENT"))
            {
                return this._pathElement;
            }
            if ((feature == "FILESET"))
            {
                return this._fileset;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REFID"))
            {
                this.Refid = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ClassPath/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassPath class
        /// </summary>
        public class ClassPathChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassPath _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassPathChildrenCollection(ClassPath parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PathElement.Count);
                    count = (count + this._parent.Fileset.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PathElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PathElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPathElement pathElementCasted = item.As<IPathElement>();
                if ((pathElementCasted != null))
                {
                    this._parent.PathElement.Add(pathElementCasted);
                }
                IFileSet filesetCasted = item.As<IFileSet>();
                if ((filesetCasted != null))
                {
                    this._parent.Fileset.Add(filesetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PathElement.Clear();
                this._parent.Fileset.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PathElement.Contains(item))
                {
                    return true;
                }
                if (this._parent.Fileset.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> pathElementEnumerator = this._parent.PathElement.GetEnumerator();
                try
                {
                    for (
                    ; pathElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pathElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pathElementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filesetEnumerator = this._parent.Fileset.GetEnumerator();
                try
                {
                    for (
                    ; filesetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filesetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filesetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPathElement pathElementItem = item.As<IPathElement>();
                if (((pathElementItem != null) 
                            && this._parent.PathElement.Remove(pathElementItem)))
                {
                    return true;
                }
                IFileSet fileSetItem = item.As<IFileSet>();
                if (((fileSetItem != null) 
                            && this._parent.Fileset.Remove(fileSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PathElement).Concat(this._parent.Fileset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClassPath class
        /// </summary>
        public class ClassPathReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClassPath _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassPathReferencedElementsCollection(ClassPath parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PathElement.Count);
                    count = (count + this._parent.Fileset.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PathElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PathElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Fileset.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPathElement pathElementCasted = item.As<IPathElement>();
                if ((pathElementCasted != null))
                {
                    this._parent.PathElement.Add(pathElementCasted);
                }
                IFileSet filesetCasted = item.As<IFileSet>();
                if ((filesetCasted != null))
                {
                    this._parent.Fileset.Add(filesetCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PathElement.Clear();
                this._parent.Fileset.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PathElement.Contains(item))
                {
                    return true;
                }
                if (this._parent.Fileset.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> pathElementEnumerator = this._parent.PathElement.GetEnumerator();
                try
                {
                    for (
                    ; pathElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pathElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pathElementEnumerator.Dispose();
                }
                IEnumerator<IModelElement> filesetEnumerator = this._parent.Fileset.GetEnumerator();
                try
                {
                    for (
                    ; filesetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = filesetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    filesetEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPathElement pathElementItem = item.As<IPathElement>();
                if (((pathElementItem != null) 
                            && this._parent.PathElement.Remove(pathElementItem)))
                {
                    return true;
                }
                IFileSet fileSetItem = item.As<IFileSet>();
                if (((fileSetItem != null) 
                            && this._parent.Fileset.Remove(fileSetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PathElement).Concat(this._parent.Fileset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the refid property
        /// </summary>
        private sealed class RefidProxy : ModelPropertyChange<IClassPath, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefidProxy(IClassPath modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Refid;
                }
                set
                {
                    this.ModelElement.Refid = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefidChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefidChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Task class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Task/")]
    public abstract class Task : ModelElement, ITask, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [XmlElementNameAttribute("target")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("tasks")]
        public virtual ITarget Target
        {
            get
            {
                return ModelHelper.CastAs<ITarget>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TaskReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Task/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanged;
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ITarget oldTarget = ModelHelper.CastAs<ITarget>(oldParent);
            ITarget newTarget = ModelHelper.CastAs<ITarget>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTarget, newTarget);
            this.OnTargetChanging(e);
            this.OnPropertyChanging("Target");
        }
        
        /// <summary>
        /// Raises the TargetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ITarget oldTarget = ModelHelper.CastAs<ITarget>(oldParent);
            ITarget newTarget = ModelHelper.CastAs<ITarget>(newParent);
            if ((oldTarget != null))
            {
                oldTarget.Tasks.Remove(this);
            }
            if ((newTarget != null))
            {
                newTarget.Tasks.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldTarget, newTarget);
            this.OnTargetChanged(e);
            this.OnPropertyChanged("Target", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TARGET"))
            {
                this.Target = ((ITarget)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Target"))
            {
                return new TargetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Target"))
            {
                return new TargetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Task/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Task class
        /// </summary>
        public class TaskReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Task _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TaskReferencedElementsCollection(Task parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Target != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TargetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TargetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Target == null))
                {
                    ITarget targetCasted = item.As<ITarget>();
                    if ((targetCasted != null))
                    {
                        this._parent.Target = targetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Target = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Target))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Target != null))
                {
                    array[arrayIndex] = this._parent.Target;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Target == item))
                {
                    this._parent.Target = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Target).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<ITask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(ITask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the target property
        /// </summary>
        private sealed class TargetProxy : ModelPropertyChange<ITask, ITarget>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetProxy(ITask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITarget Value
            {
                get
                {
                    return this.ModelElement.Target;
                }
                set
                {
                    this.ModelElement.Target = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TargetChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the TaskDef class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//TaskDef/")]
    [DebuggerDisplayAttribute("TaskDef {Name}")]
    public class TaskDef : ModelElement, ITaskDef, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Classname property
        /// </summary>
        private string _classname;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The classname property
        /// </summary>
        [XmlElementNameAttribute("classname")]
        [XmlAttributeAttribute(true)]
        public virtual string Classname
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    string old = this._classname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassnameChanging(e);
                    this.OnPropertyChanging("Classname", e);
                    this._classname = value;
                    this.OnClassnameChanged(e);
                    this.OnPropertyChanged("Classname", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//TaskDef/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "CLASSNAME"))
            {
                return this.Classname;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "CLASSNAME"))
            {
                this.Classname = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//TaskDef/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ITaskDef, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ITaskDef modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classname property
        /// </summary>
        private sealed class ClassnameProxy : ModelPropertyChange<ITaskDef, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassnameProxy(ITaskDef modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classname;
                }
                set
                {
                    this.ModelElement.Classname = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<ITaskDef, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(ITaskDef modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the NewTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//NewTask/")]
    public class NewTask : Task, INewTask, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TaskName property
        /// </summary>
        private ITaskDef _taskName;
        
        /// <summary>
        /// The backing field for the Attributes property
        /// </summary>
        private ObservableCompositionSet<IAttribut> _attributes;
        
        private static IClass _classInstance;
        
        public NewTask()
        {
            this._attributes = new ObservableCompositionSet<IAttribut>(this);
            this._attributes.CollectionChanging += this.AttributesCollectionChanging;
            this._attributes.CollectionChanged += this.AttributesCollectionChanged;
        }
        
        /// <summary>
        /// The taskName property
        /// </summary>
        [XmlElementNameAttribute("taskName")]
        [XmlAttributeAttribute(true)]
        public virtual ITaskDef TaskName
        {
            get
            {
                return this._taskName;
            }
            set
            {
                if ((this._taskName != value))
                {
                    ITaskDef old = this._taskName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTaskNameChanging(e);
                    this.OnPropertyChanging("TaskName", e);
                    this._taskName = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTaskName;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTaskName;
                    }
                    this.OnTaskNameChanged(e);
                    this.OnPropertyChanged("TaskName", e);
                }
            }
        }
        
        /// <summary>
        /// The attributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("attributes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IAttribut> Attributes
        {
            get
            {
                return this._attributes;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new NewTaskChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NewTaskReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//NewTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TaskName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaskNameChanging;
        
        /// <summary>
        /// Gets fired when the TaskName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaskNameChanged;
        
        /// <summary>
        /// Raises the TaskNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaskNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaskNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TaskNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaskNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaskNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TaskName property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTaskName(object sender, System.EventArgs eventArgs)
        {
            this.TaskName = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Attributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Attributes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Attributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Attributes", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ATTRIBUTES"))
            {
                return this._attributes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TASKNAME"))
            {
                this.TaskName = ((ITaskDef)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TaskName"))
            {
                return new TaskNameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TaskName"))
            {
                return new TaskNameProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//NewTask/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the NewTask class
        /// </summary>
        public class NewTaskChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private NewTask _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NewTaskChildrenCollection(NewTask parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Attributes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Attributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Attributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAttribut attributesCasted = item.As<IAttribut>();
                if ((attributesCasted != null))
                {
                    this._parent.Attributes.Add(attributesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Attributes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Attributes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> attributesEnumerator = this._parent.Attributes.GetEnumerator();
                try
                {
                    for (
                    ; attributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAttribut attributItem = item.As<IAttribut>();
                if (((attributItem != null) 
                            && this._parent.Attributes.Remove(attributItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Attributes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the NewTask class
        /// </summary>
        public class NewTaskReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private NewTask _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NewTaskReferencedElementsCollection(NewTask parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TaskName != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Attributes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TaskNameChanged += this.PropagateValueChanges;
                this._parent.Attributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TaskNameChanged -= this.PropagateValueChanges;
                this._parent.Attributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TaskName == null))
                {
                    ITaskDef taskNameCasted = item.As<ITaskDef>();
                    if ((taskNameCasted != null))
                    {
                        this._parent.TaskName = taskNameCasted;
                        return;
                    }
                }
                IAttribut attributesCasted = item.As<IAttribut>();
                if ((attributesCasted != null))
                {
                    this._parent.Attributes.Add(attributesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TaskName = null;
                this._parent.Attributes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TaskName))
                {
                    return true;
                }
                if (this._parent.Attributes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TaskName != null))
                {
                    array[arrayIndex] = this._parent.TaskName;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> attributesEnumerator = this._parent.Attributes.GetEnumerator();
                try
                {
                    for (
                    ; attributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TaskName == item))
                {
                    this._parent.TaskName = null;
                    return true;
                }
                IAttribut attributItem = item.As<IAttribut>();
                if (((attributItem != null) 
                            && this._parent.Attributes.Remove(attributItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TaskName).Concat(this._parent.Attributes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the taskName property
        /// </summary>
        private sealed class TaskNameProxy : ModelPropertyChange<INewTask, ITaskDef>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TaskNameProxy(INewTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITaskDef Value
            {
                get
                {
                    return this.ModelElement.TaskName;
                }
                set
                {
                    this.ModelElement.TaskName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TaskNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TaskNameChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Attribut class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Attribut/")]
    [DebuggerDisplayAttribute("Attribut {Name}")]
    public class Attribut : ModelElement, IAttribut, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Attribut/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Attribut/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IAttribut, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IAttribut modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IAttribut, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IAttribut modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IAttribut, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IAttribut modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the PreDefinedTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//PreDefinedTask/")]
    public abstract class PreDefinedTask : Task, IPreDefinedTask, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the Taskname property
        /// </summary>
        private string _taskname;
        
        /// <summary>
        /// The backing field for the Description property
        /// </summary>
        private string _description;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The taskname property
        /// </summary>
        [XmlElementNameAttribute("taskname")]
        [XmlAttributeAttribute(true)]
        public virtual string Taskname
        {
            get
            {
                return this._taskname;
            }
            set
            {
                if ((this._taskname != value))
                {
                    string old = this._taskname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTasknameChanging(e);
                    this.OnPropertyChanging("Taskname", e);
                    this._taskname = value;
                    this.OnTasknameChanged(e);
                    this.OnPropertyChanged("Taskname", e);
                }
            }
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        [XmlElementNameAttribute("description")]
        [XmlAttributeAttribute(true)]
        public virtual string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    string old = this._description;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDescriptionChanging(e);
                    this.OnPropertyChanging("Description", e);
                    this._description = value;
                    this.OnDescriptionChanged(e);
                    this.OnPropertyChanged("Description", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PreDefinedTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Taskname property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TasknameChanging;
        
        /// <summary>
        /// Gets fired when the Taskname property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TasknameChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TasknameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTasknameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TasknameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TasknameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTasknameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TasknameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "TASKNAME"))
            {
                return this.Taskname;
            }
            if ((attribute == "DESCRIPTION"))
            {
                return this.Description;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "TASKNAME"))
            {
                this.Taskname = ((string)(value));
                return;
            }
            if ((feature == "DESCRIPTION"))
            {
                this.Description = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//PreDefinedTask/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IPreDefinedTask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IPreDefinedTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the taskname property
        /// </summary>
        private sealed class TasknameProxy : ModelPropertyChange<IPreDefinedTask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TasknameProxy(IPreDefinedTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Taskname;
                }
                set
                {
                    this.ModelElement.Taskname = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TasknameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TasknameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the description property
        /// </summary>
        private sealed class DescriptionProxy : ModelPropertyChange<IPreDefinedTask, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DescriptionProxy(IPreDefinedTask modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Description;
                }
                set
                {
                    this.ModelElement.Description = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DescriptionChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ExecutionTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//ExecutionTask/")]
    public abstract class ExecutionTask : PreDefinedTask, IExecutionTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ExecutionTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ExecutionTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Exec class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Exec/")]
    public class Exec : ExecutionTask, IExec, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Executable property
        /// </summary>
        private string _executable;
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private string _dir;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The executable property
        /// </summary>
        [XmlElementNameAttribute("executable")]
        [XmlAttributeAttribute(true)]
        public virtual string Executable
        {
            get
            {
                return this._executable;
            }
            set
            {
                if ((this._executable != value))
                {
                    string old = this._executable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExecutableChanging(e);
                    this.OnPropertyChanging("Executable", e);
                    this._executable = value;
                    this.OnExecutableChanged(e);
                    this.OnPropertyChanged("Executable", e);
                }
            }
        }
        
        /// <summary>
        /// The dir property
        /// </summary>
        [XmlElementNameAttribute("dir")]
        [XmlAttributeAttribute(true)]
        public virtual string Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    string old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Exec/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Executable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExecutableChanging;
        
        /// <summary>
        /// Gets fired when the Executable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExecutableChanged;
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Raises the ExecutableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExecutableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExecutableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExecutableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExecutableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExecutableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EXECUTABLE"))
            {
                return this.Executable;
            }
            if ((attribute == "DIR"))
            {
                return this.Dir;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EXECUTABLE"))
            {
                this.Executable = ((string)(value));
                return;
            }
            if ((feature == "DIR"))
            {
                this.Dir = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Exec/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the executable property
        /// </summary>
        private sealed class ExecutableProxy : ModelPropertyChange<IExec, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExecutableProxy(IExec modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Executable;
                }
                set
                {
                    this.ModelElement.Executable = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExecutableChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExecutableChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IExec, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IExec modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Java class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Java/")]
    public class Java : ExecutionTask, IJava, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Classname property
        /// </summary>
        private string _classname;
        
        /// <summary>
        /// The backing field for the Jar property
        /// </summary>
        private string _jar;
        
        /// <summary>
        /// The backing field for the Fork property
        /// </summary>
        private string _fork;
        
        /// <summary>
        /// The backing field for the ClassPath property
        /// </summary>
        private IClassPath _classPath;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The classname property
        /// </summary>
        [XmlElementNameAttribute("classname")]
        [XmlAttributeAttribute(true)]
        public virtual string Classname
        {
            get
            {
                return this._classname;
            }
            set
            {
                if ((this._classname != value))
                {
                    string old = this._classname;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassnameChanging(e);
                    this.OnPropertyChanging("Classname", e);
                    this._classname = value;
                    this.OnClassnameChanged(e);
                    this.OnPropertyChanged("Classname", e);
                }
            }
        }
        
        /// <summary>
        /// The jar property
        /// </summary>
        [XmlElementNameAttribute("jar")]
        [XmlAttributeAttribute(true)]
        public virtual string Jar
        {
            get
            {
                return this._jar;
            }
            set
            {
                if ((this._jar != value))
                {
                    string old = this._jar;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnJarChanging(e);
                    this.OnPropertyChanging("Jar", e);
                    this._jar = value;
                    this.OnJarChanged(e);
                    this.OnPropertyChanged("Jar", e);
                }
            }
        }
        
        /// <summary>
        /// The fork property
        /// </summary>
        [XmlElementNameAttribute("fork")]
        [XmlAttributeAttribute(true)]
        public virtual string Fork
        {
            get
            {
                return this._fork;
            }
            set
            {
                if ((this._fork != value))
                {
                    string old = this._fork;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnForkChanging(e);
                    this.OnPropertyChanging("Fork", e);
                    this._fork = value;
                    this.OnForkChanged(e);
                    this.OnPropertyChanged("Fork", e);
                }
            }
        }
        
        /// <summary>
        /// The classPath property
        /// </summary>
        [XmlElementNameAttribute("classPath")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IClassPath ClassPath
        {
            get
            {
                return this._classPath;
            }
            set
            {
                if ((this._classPath != value))
                {
                    IClassPath old = this._classPath;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassPathChanging(e);
                    this.OnPropertyChanging("ClassPath", e);
                    this._classPath = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetClassPath;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetClassPath;
                    }
                    this.OnClassPathChanged(e);
                    this.OnPropertyChanged("ClassPath", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new JavaChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new JavaReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Java/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the Jar property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JarChanging;
        
        /// <summary>
        /// Gets fired when the Jar property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JarChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the ClassPath property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassPathChanging;
        
        /// <summary>
        /// Gets fired when the ClassPath property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassPathChanged;
        
        /// <summary>
        /// Raises the ClassnameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassnameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassnameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassnameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JarChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJarChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JarChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JarChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJarChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JarChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassPathChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassPathChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassPathChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassPathChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassPathChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassPathChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ClassPath property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClassPath(object sender, System.EventArgs eventArgs)
        {
            this.ClassPath = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ClassPath))
            {
                return ModelHelper.CreatePath("ClassPath");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASSPATH"))
            {
                return this.ClassPath;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CLASSNAME"))
            {
                return this.Classname;
            }
            if ((attribute == "JAR"))
            {
                return this.Jar;
            }
            if ((attribute == "FORK"))
            {
                return this.Fork;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASSPATH"))
            {
                this.ClassPath = ((IClassPath)(value));
                return;
            }
            if ((feature == "CLASSNAME"))
            {
                this.Classname = ((string)(value));
                return;
            }
            if ((feature == "JAR"))
            {
                this.Jar = ((string)(value));
                return;
            }
            if ((feature == "FORK"))
            {
                this.Fork = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ClassPath"))
            {
                return new ClassPathProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ClassPath"))
            {
                return new ClassPathProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Java/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Java class
        /// </summary>
        public class JavaChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Java _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JavaChildrenCollection(Java parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ClassPath != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ClassPathChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ClassPathChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ClassPath == null))
                {
                    IClassPath classPathCasted = item.As<IClassPath>();
                    if ((classPathCasted != null))
                    {
                        this._parent.ClassPath = classPathCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ClassPath = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ClassPath))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ClassPath != null))
                {
                    array[arrayIndex] = this._parent.ClassPath;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ClassPath == item))
                {
                    this._parent.ClassPath = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ClassPath).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Java class
        /// </summary>
        public class JavaReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Java _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JavaReferencedElementsCollection(Java parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ClassPath != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ClassPathChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ClassPathChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ClassPath == null))
                {
                    IClassPath classPathCasted = item.As<IClassPath>();
                    if ((classPathCasted != null))
                    {
                        this._parent.ClassPath = classPathCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ClassPath = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ClassPath))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ClassPath != null))
                {
                    array[arrayIndex] = this._parent.ClassPath;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ClassPath == item))
                {
                    this._parent.ClassPath = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ClassPath).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classname property
        /// </summary>
        private sealed class ClassnameProxy : ModelPropertyChange<IJava, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassnameProxy(IJava modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Classname;
                }
                set
                {
                    this.ModelElement.Classname = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassnameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the jar property
        /// </summary>
        private sealed class JarProxy : ModelPropertyChange<IJava, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public JarProxy(IJava modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Jar;
                }
                set
                {
                    this.ModelElement.Jar = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JarChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JarChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fork property
        /// </summary>
        private sealed class ForkProxy : ModelPropertyChange<IJava, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ForkProxy(IJava modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Fork;
                }
                set
                {
                    this.ModelElement.Fork = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classPath property
        /// </summary>
        private sealed class ClassPathProxy : ModelPropertyChange<IJava, IClassPath>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassPathProxy(IJava modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassPath Value
            {
                get
                {
                    return this.ModelElement.ClassPath;
                }
                set
                {
                    this.ModelElement.ClassPath = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassPathChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassPathChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the MiscellaneousTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//MiscellaneousTask/")]
    public abstract class MiscellaneousTask : PreDefinedTask, IMiscellaneousTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//MiscellaneousTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//MiscellaneousTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Echo class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Echo/")]
    public class Echo : MiscellaneousTask, IEcho, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Message property
        /// </summary>
        private string _message;
        
        /// <summary>
        /// The backing field for the File property
        /// </summary>
        private string _file;
        
        /// <summary>
        /// The backing field for the Append property
        /// </summary>
        private string _append;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The message property
        /// </summary>
        [XmlElementNameAttribute("message")]
        [XmlAttributeAttribute(true)]
        public virtual string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    string old = this._message;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMessageChanging(e);
                    this.OnPropertyChanging("Message", e);
                    this._message = value;
                    this.OnMessageChanged(e);
                    this.OnPropertyChanged("Message", e);
                }
            }
        }
        
        /// <summary>
        /// The file property
        /// </summary>
        [XmlElementNameAttribute("file")]
        [XmlAttributeAttribute(true)]
        public virtual string File
        {
            get
            {
                return this._file;
            }
            set
            {
                if ((this._file != value))
                {
                    string old = this._file;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFileChanging(e);
                    this.OnPropertyChanging("File", e);
                    this._file = value;
                    this.OnFileChanged(e);
                    this.OnPropertyChanged("File", e);
                }
            }
        }
        
        /// <summary>
        /// The append property
        /// </summary>
        [XmlElementNameAttribute("append")]
        [XmlAttributeAttribute(true)]
        public virtual string Append
        {
            get
            {
                return this._append;
            }
            set
            {
                if ((this._append != value))
                {
                    string old = this._append;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAppendChanging(e);
                    this.OnPropertyChanging("Append", e);
                    this._append = value;
                    this.OnAppendChanged(e);
                    this.OnPropertyChanged("Append", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Echo/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Message property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MessageChanging;
        
        /// <summary>
        /// Gets fired when the Message property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MessageChanged;
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Append property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AppendChanging;
        
        /// <summary>
        /// Gets fired when the Append property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AppendChanged;
        
        /// <summary>
        /// Raises the MessageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMessageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MessageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MessageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMessageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MessageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AppendChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAppendChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AppendChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AppendChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAppendChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AppendChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MESSAGE"))
            {
                return this.Message;
            }
            if ((attribute == "FILE"))
            {
                return this.File;
            }
            if ((attribute == "APPEND"))
            {
                return this.Append;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MESSAGE"))
            {
                this.Message = ((string)(value));
                return;
            }
            if ((feature == "FILE"))
            {
                this.File = ((string)(value));
                return;
            }
            if ((feature == "APPEND"))
            {
                this.Append = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Echo/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the message property
        /// </summary>
        private sealed class MessageProxy : ModelPropertyChange<IEcho, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MessageProxy(IEcho modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Message;
                }
                set
                {
                    this.ModelElement.Message = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MessageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MessageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the file property
        /// </summary>
        private sealed class FileProxy : ModelPropertyChange<IEcho, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileProxy(IEcho modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.File;
                }
                set
                {
                    this.ModelElement.File = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the append property
        /// </summary>
        private sealed class AppendProxy : ModelPropertyChange<IEcho, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AppendProxy(IEcho modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Append;
                }
                set
                {
                    this.ModelElement.Append = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AppendChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AppendChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Tstamp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Tstamp/")]
    public class Tstamp : MiscellaneousTask, ITstamp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Format property
        /// </summary>
        private ObservableCompositionSet<IFormatTstamp> _format;
        
        private static IClass _classInstance;
        
        public Tstamp()
        {
            this._format = new ObservableCompositionSet<IFormatTstamp>(this);
            this._format.CollectionChanging += this.FormatCollectionChanging;
            this._format.CollectionChanged += this.FormatCollectionChanged;
        }
        
        /// <summary>
        /// The format property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("format")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IFormatTstamp> Format
        {
            get
            {
                return this._format;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new TstampChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TstampReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Tstamp/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Format property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FormatCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Format", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Format property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FormatCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Format", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FORMAT"))
            {
                return this._format;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Tstamp/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Tstamp class
        /// </summary>
        public class TstampChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Tstamp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TstampChildrenCollection(Tstamp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Format.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Format.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Format.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFormatTstamp formatCasted = item.As<IFormatTstamp>();
                if ((formatCasted != null))
                {
                    this._parent.Format.Add(formatCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Format.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Format.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> formatEnumerator = this._parent.Format.GetEnumerator();
                try
                {
                    for (
                    ; formatEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = formatEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    formatEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFormatTstamp formatTstampItem = item.As<IFormatTstamp>();
                if (((formatTstampItem != null) 
                            && this._parent.Format.Remove(formatTstampItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Format).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Tstamp class
        /// </summary>
        public class TstampReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Tstamp _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TstampReferencedElementsCollection(Tstamp parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Format.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Format.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Format.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFormatTstamp formatCasted = item.As<IFormatTstamp>();
                if ((formatCasted != null))
                {
                    this._parent.Format.Add(formatCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Format.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Format.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> formatEnumerator = this._parent.Format.GetEnumerator();
                try
                {
                    for (
                    ; formatEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = formatEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    formatEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFormatTstamp formatTstampItem = item.As<IFormatTstamp>();
                if (((formatTstampItem != null) 
                            && this._parent.Format.Remove(formatTstampItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Format).GetEnumerator();
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FormatTstamp class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FormatTstamp/")]
    public class FormatTstamp : ModelElement, IFormatTstamp, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Property property
        /// </summary>
        private string _property;
        
        /// <summary>
        /// The backing field for the Pattern property
        /// </summary>
        private string _pattern;
        
        /// <summary>
        /// The backing field for the Offset property
        /// </summary>
        private string _offset;
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        private string _unit;
        
        /// <summary>
        /// The backing field for the Locale property
        /// </summary>
        private string _locale;
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The property property
        /// </summary>
        [XmlElementNameAttribute("property")]
        [XmlAttributeAttribute(true)]
        public virtual string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    string old = this._property;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging(e);
                    this.OnPropertyChanging("Property", e);
                    this._property = value;
                    this.OnPropertyChanged(e);
                    this.OnPropertyChanged("Property", e);
                }
            }
        }
        
        /// <summary>
        /// The pattern property
        /// </summary>
        [XmlElementNameAttribute("pattern")]
        [XmlAttributeAttribute(true)]
        public virtual string Pattern
        {
            get
            {
                return this._pattern;
            }
            set
            {
                if ((this._pattern != value))
                {
                    string old = this._pattern;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPatternChanging(e);
                    this.OnPropertyChanging("Pattern", e);
                    this._pattern = value;
                    this.OnPatternChanged(e);
                    this.OnPropertyChanged("Pattern", e);
                }
            }
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        [XmlElementNameAttribute("offset")]
        [XmlAttributeAttribute(true)]
        public virtual string Offset
        {
            get
            {
                return this._offset;
            }
            set
            {
                if ((this._offset != value))
                {
                    string old = this._offset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOffsetChanging(e);
                    this.OnPropertyChanging("Offset", e);
                    this._offset = value;
                    this.OnOffsetChanged(e);
                    this.OnPropertyChanged("Offset", e);
                }
            }
        }
        
        /// <summary>
        /// The unit property
        /// </summary>
        [XmlElementNameAttribute("unit")]
        [XmlAttributeAttribute(true)]
        public virtual string Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    string old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e);
                    this._unit = value;
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e);
                }
            }
        }
        
        /// <summary>
        /// The locale property
        /// </summary>
        [XmlElementNameAttribute("locale")]
        [XmlAttributeAttribute(true)]
        public virtual string Locale
        {
            get
            {
                return this._locale;
            }
            set
            {
                if ((this._locale != value))
                {
                    string old = this._locale;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocaleChanging(e);
                    this.OnPropertyChanging("Locale", e);
                    this._locale = value;
                    this.OnLocaleChanged(e);
                    this.OnPropertyChanged("Locale", e);
                }
            }
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FormatTstamp/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Property property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyChanging;
        
        /// <summary>
        /// Gets fired when the Property property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyChanged;
        
        /// <summary>
        /// Gets fired before the Pattern property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PatternChanging;
        
        /// <summary>
        /// Gets fired when the Pattern property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PatternChanged;
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the Locale property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaleChanging;
        
        /// <summary>
        /// Gets fired when the Locale property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocaleChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Raises the PropertyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PatternChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPatternChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PatternChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PatternChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPatternChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PatternChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OffsetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OffsetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocaleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocaleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocaleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PROPERTY"))
            {
                return this.Property;
            }
            if ((attribute == "PATTERN"))
            {
                return this.Pattern;
            }
            if ((attribute == "OFFSET"))
            {
                return this.Offset;
            }
            if ((attribute == "UNIT"))
            {
                return this.Unit;
            }
            if ((attribute == "LOCALE"))
            {
                return this.Locale;
            }
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROPERTY"))
            {
                this.Property = ((string)(value));
                return;
            }
            if ((feature == "PATTERN"))
            {
                this.Pattern = ((string)(value));
                return;
            }
            if ((feature == "OFFSET"))
            {
                this.Offset = ((string)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((string)(value));
                return;
            }
            if ((feature == "LOCALE"))
            {
                this.Locale = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FormatTstamp/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the property property
        /// </summary>
        private sealed class PropertyProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Property;
                }
                set
                {
                    this.ModelElement.Property = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PropertyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PropertyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pattern property
        /// </summary>
        private sealed class PatternProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PatternProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Pattern;
                }
                set
                {
                    this.ModelElement.Pattern = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PatternChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PatternChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the offset property
        /// </summary>
        private sealed class OffsetProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OffsetProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Offset;
                }
                set
                {
                    this.ModelElement.Offset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OffsetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OffsetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the locale property
        /// </summary>
        private sealed class LocaleProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocaleProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Locale;
                }
                set
                {
                    this.ModelElement.Locale = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocaleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<IFormatTstamp, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(IFormatTstamp modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IDChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the CompileTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//CompileTask/")]
    public abstract class CompileTask : PreDefinedTask, ICompileTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//CompileTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//CompileTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Javac class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Javac/")]
    public class Javac : CompileTask, IJavac, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Srcdir property
        /// </summary>
        private string _srcdir;
        
        /// <summary>
        /// The backing field for the Destdir property
        /// </summary>
        private string _destdir;
        
        /// <summary>
        /// The backing field for the Debug property
        /// </summary>
        private string _debug;
        
        /// <summary>
        /// The backing field for the Fork property
        /// </summary>
        private string _fork;
        
        /// <summary>
        /// The backing field for the Optimize property
        /// </summary>
        private string _optimize;
        
        /// <summary>
        /// The backing field for the Deprecation property
        /// </summary>
        private string _deprecation;
        
        /// <summary>
        /// The backing field for the InExcludes property
        /// </summary>
        private ObservableCompositionSet<IInExcludes> _inExcludes;
        
        /// <summary>
        /// The backing field for the ClassPath property
        /// </summary>
        private IClassPath _classPath;
        
        private static IClass _classInstance;
        
        public Javac()
        {
            this._inExcludes = new ObservableCompositionSet<IInExcludes>(this);
            this._inExcludes.CollectionChanging += this.InExcludesCollectionChanging;
            this._inExcludes.CollectionChanged += this.InExcludesCollectionChanged;
        }
        
        /// <summary>
        /// The srcdir property
        /// </summary>
        [XmlElementNameAttribute("srcdir")]
        [XmlAttributeAttribute(true)]
        public virtual string Srcdir
        {
            get
            {
                return this._srcdir;
            }
            set
            {
                if ((this._srcdir != value))
                {
                    string old = this._srcdir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSrcdirChanging(e);
                    this.OnPropertyChanging("Srcdir", e);
                    this._srcdir = value;
                    this.OnSrcdirChanged(e);
                    this.OnPropertyChanged("Srcdir", e);
                }
            }
        }
        
        /// <summary>
        /// The destdir property
        /// </summary>
        [XmlElementNameAttribute("destdir")]
        [XmlAttributeAttribute(true)]
        public virtual string Destdir
        {
            get
            {
                return this._destdir;
            }
            set
            {
                if ((this._destdir != value))
                {
                    string old = this._destdir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDestdirChanging(e);
                    this.OnPropertyChanging("Destdir", e);
                    this._destdir = value;
                    this.OnDestdirChanged(e);
                    this.OnPropertyChanged("Destdir", e);
                }
            }
        }
        
        /// <summary>
        /// The debug property
        /// </summary>
        [XmlElementNameAttribute("debug")]
        [XmlAttributeAttribute(true)]
        public virtual string Debug
        {
            get
            {
                return this._debug;
            }
            set
            {
                if ((this._debug != value))
                {
                    string old = this._debug;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDebugChanging(e);
                    this.OnPropertyChanging("Debug", e);
                    this._debug = value;
                    this.OnDebugChanged(e);
                    this.OnPropertyChanged("Debug", e);
                }
            }
        }
        
        /// <summary>
        /// The fork property
        /// </summary>
        [XmlElementNameAttribute("fork")]
        [XmlAttributeAttribute(true)]
        public virtual string Fork
        {
            get
            {
                return this._fork;
            }
            set
            {
                if ((this._fork != value))
                {
                    string old = this._fork;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnForkChanging(e);
                    this.OnPropertyChanging("Fork", e);
                    this._fork = value;
                    this.OnForkChanged(e);
                    this.OnPropertyChanged("Fork", e);
                }
            }
        }
        
        /// <summary>
        /// The optimize property
        /// </summary>
        [XmlElementNameAttribute("optimize")]
        [XmlAttributeAttribute(true)]
        public virtual string Optimize
        {
            get
            {
                return this._optimize;
            }
            set
            {
                if ((this._optimize != value))
                {
                    string old = this._optimize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOptimizeChanging(e);
                    this.OnPropertyChanging("Optimize", e);
                    this._optimize = value;
                    this.OnOptimizeChanged(e);
                    this.OnPropertyChanged("Optimize", e);
                }
            }
        }
        
        /// <summary>
        /// The deprecation property
        /// </summary>
        [XmlElementNameAttribute("deprecation")]
        [XmlAttributeAttribute(true)]
        public virtual string Deprecation
        {
            get
            {
                return this._deprecation;
            }
            set
            {
                if ((this._deprecation != value))
                {
                    string old = this._deprecation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeprecationChanging(e);
                    this.OnPropertyChanging("Deprecation", e);
                    this._deprecation = value;
                    this.OnDeprecationChanged(e);
                    this.OnPropertyChanged("Deprecation", e);
                }
            }
        }
        
        /// <summary>
        /// The inExcludes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("inExcludes")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ISetExpression<IInExcludes> InExcludes
        {
            get
            {
                return this._inExcludes;
            }
        }
        
        /// <summary>
        /// The classPath property
        /// </summary>
        [XmlElementNameAttribute("classPath")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IClassPath ClassPath
        {
            get
            {
                return this._classPath;
            }
            set
            {
                if ((this._classPath != value))
                {
                    IClassPath old = this._classPath;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassPathChanging(e);
                    this.OnPropertyChanging("ClassPath", e);
                    this._classPath = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetClassPath;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetClassPath;
                    }
                    this.OnClassPathChanged(e);
                    this.OnPropertyChanged("ClassPath", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new JavacChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new JavacReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Javac/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Srcdir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcdirChanging;
        
        /// <summary>
        /// Gets fired when the Srcdir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SrcdirChanged;
        
        /// <summary>
        /// Gets fired before the Destdir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DestdirChanging;
        
        /// <summary>
        /// Gets fired when the Destdir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DestdirChanged;
        
        /// <summary>
        /// Gets fired before the Debug property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DebugChanging;
        
        /// <summary>
        /// Gets fired when the Debug property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DebugChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the Optimize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptimizeChanging;
        
        /// <summary>
        /// Gets fired when the Optimize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptimizeChanged;
        
        /// <summary>
        /// Gets fired before the Deprecation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeprecationChanging;
        
        /// <summary>
        /// Gets fired when the Deprecation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeprecationChanged;
        
        /// <summary>
        /// Gets fired before the ClassPath property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassPathChanging;
        
        /// <summary>
        /// Gets fired when the ClassPath property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassPathChanged;
        
        /// <summary>
        /// Raises the SrcdirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcdirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcdirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SrcdirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSrcdirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SrcdirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DestdirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDestdirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DestdirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DestdirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDestdirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DestdirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DebugChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDebugChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DebugChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DebugChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDebugChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DebugChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OptimizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptimizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptimizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OptimizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptimizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptimizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeprecationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeprecationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeprecationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeprecationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeprecationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeprecationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InExcludes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InExcludesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("InExcludes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InExcludes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InExcludesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InExcludes", e);
        }
        
        /// <summary>
        /// Raises the ClassPathChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassPathChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassPathChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassPathChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassPathChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassPathChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ClassPath property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClassPath(object sender, System.EventArgs eventArgs)
        {
            this.ClassPath = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ClassPath))
            {
                return ModelHelper.CreatePath("ClassPath");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CLASSPATH"))
            {
                return this.ClassPath;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SRCDIR"))
            {
                return this.Srcdir;
            }
            if ((attribute == "DESTDIR"))
            {
                return this.Destdir;
            }
            if ((attribute == "DEBUG"))
            {
                return this.Debug;
            }
            if ((attribute == "FORK"))
            {
                return this.Fork;
            }
            if ((attribute == "OPTIMIZE"))
            {
                return this.Optimize;
            }
            if ((attribute == "DEPRECATION"))
            {
                return this.Deprecation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INEXCLUDES"))
            {
                return this._inExcludes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLASSPATH"))
            {
                this.ClassPath = ((IClassPath)(value));
                return;
            }
            if ((feature == "SRCDIR"))
            {
                this.Srcdir = ((string)(value));
                return;
            }
            if ((feature == "DESTDIR"))
            {
                this.Destdir = ((string)(value));
                return;
            }
            if ((feature == "DEBUG"))
            {
                this.Debug = ((string)(value));
                return;
            }
            if ((feature == "FORK"))
            {
                this.Fork = ((string)(value));
                return;
            }
            if ((feature == "OPTIMIZE"))
            {
                this.Optimize = ((string)(value));
                return;
            }
            if ((feature == "DEPRECATION"))
            {
                this.Deprecation = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ClassPath"))
            {
                return new ClassPathProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ClassPath"))
            {
                return new ClassPathProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Javac/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Javac class
        /// </summary>
        public class JavacChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Javac _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JavacChildrenCollection(Javac parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InExcludes.Count);
                    if ((this._parent.ClassPath != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InExcludes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ClassPathChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InExcludes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ClassPathChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInExcludes inExcludesCasted = item.As<IInExcludes>();
                if ((inExcludesCasted != null))
                {
                    this._parent.InExcludes.Add(inExcludesCasted);
                }
                if ((this._parent.ClassPath == null))
                {
                    IClassPath classPathCasted = item.As<IClassPath>();
                    if ((classPathCasted != null))
                    {
                        this._parent.ClassPath = classPathCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InExcludes.Clear();
                this._parent.ClassPath = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InExcludes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ClassPath))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inExcludesEnumerator = this._parent.InExcludes.GetEnumerator();
                try
                {
                    for (
                    ; inExcludesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inExcludesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inExcludesEnumerator.Dispose();
                }
                if ((this._parent.ClassPath != null))
                {
                    array[arrayIndex] = this._parent.ClassPath;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInExcludes inExcludesItem = item.As<IInExcludes>();
                if (((inExcludesItem != null) 
                            && this._parent.InExcludes.Remove(inExcludesItem)))
                {
                    return true;
                }
                if ((this._parent.ClassPath == item))
                {
                    this._parent.ClassPath = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InExcludes).Concat(this._parent.ClassPath).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Javac class
        /// </summary>
        public class JavacReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Javac _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JavacReferencedElementsCollection(Javac parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InExcludes.Count);
                    if ((this._parent.ClassPath != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InExcludes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ClassPathChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InExcludes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ClassPathChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInExcludes inExcludesCasted = item.As<IInExcludes>();
                if ((inExcludesCasted != null))
                {
                    this._parent.InExcludes.Add(inExcludesCasted);
                }
                if ((this._parent.ClassPath == null))
                {
                    IClassPath classPathCasted = item.As<IClassPath>();
                    if ((classPathCasted != null))
                    {
                        this._parent.ClassPath = classPathCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InExcludes.Clear();
                this._parent.ClassPath = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InExcludes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ClassPath))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> inExcludesEnumerator = this._parent.InExcludes.GetEnumerator();
                try
                {
                    for (
                    ; inExcludesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inExcludesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inExcludesEnumerator.Dispose();
                }
                if ((this._parent.ClassPath != null))
                {
                    array[arrayIndex] = this._parent.ClassPath;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInExcludes inExcludesItem = item.As<IInExcludes>();
                if (((inExcludesItem != null) 
                            && this._parent.InExcludes.Remove(inExcludesItem)))
                {
                    return true;
                }
                if ((this._parent.ClassPath == item))
                {
                    this._parent.ClassPath = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InExcludes).Concat(this._parent.ClassPath).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the srcdir property
        /// </summary>
        private sealed class SrcdirProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SrcdirProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Srcdir;
                }
                set
                {
                    this.ModelElement.Srcdir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SrcdirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SrcdirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the destdir property
        /// </summary>
        private sealed class DestdirProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DestdirProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Destdir;
                }
                set
                {
                    this.ModelElement.Destdir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DestdirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DestdirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the debug property
        /// </summary>
        private sealed class DebugProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DebugProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Debug;
                }
                set
                {
                    this.ModelElement.Debug = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DebugChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DebugChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fork property
        /// </summary>
        private sealed class ForkProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ForkProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Fork;
                }
                set
                {
                    this.ModelElement.Fork = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForkChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ForkChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the optimize property
        /// </summary>
        private sealed class OptimizeProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OptimizeProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Optimize;
                }
                set
                {
                    this.ModelElement.Optimize = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OptimizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OptimizeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deprecation property
        /// </summary>
        private sealed class DeprecationProxy : ModelPropertyChange<IJavac, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeprecationProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Deprecation;
                }
                set
                {
                    this.ModelElement.Deprecation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeprecationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeprecationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the classPath property
        /// </summary>
        private sealed class ClassPathProxy : ModelPropertyChange<IJavac, IClassPath>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassPathProxy(IJavac modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClassPath Value
            {
                get
                {
                    return this.ModelElement.ClassPath;
                }
                set
                {
                    this.ModelElement.ClassPath = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassPathChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ClassPathChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the DocumentationTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//DocumentationTask/")]
    public abstract class DocumentationTask : PreDefinedTask, IDocumentationTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//DocumentationTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//DocumentationTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Javadoc class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Javadoc/")]
    public class Javadoc : DocumentationTask, IJavadoc, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Sourcepath property
        /// </summary>
        private string _sourcepath;
        
        /// <summary>
        /// The backing field for the Destdir property
        /// </summary>
        private string _destdir;
        
        /// <summary>
        /// The backing field for the Packagenames property
        /// </summary>
        private string _packagenames;
        
        /// <summary>
        /// The backing field for the Defaultexcludes property
        /// </summary>
        private string _defaultexcludes;
        
        /// <summary>
        /// The backing field for the Author property
        /// </summary>
        private string _author;
        
        /// <summary>
        /// The backing field for the Version property
        /// </summary>
        private string _version;
        
        /// <summary>
        /// The backing field for the Use property
        /// </summary>
        private string _use;
        
        /// <summary>
        /// The backing field for the Windowtitle property
        /// </summary>
        private string _windowtitle;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The sourcepath property
        /// </summary>
        [XmlElementNameAttribute("sourcepath")]
        [XmlAttributeAttribute(true)]
        public virtual string Sourcepath
        {
            get
            {
                return this._sourcepath;
            }
            set
            {
                if ((this._sourcepath != value))
                {
                    string old = this._sourcepath;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourcepathChanging(e);
                    this.OnPropertyChanging("Sourcepath", e);
                    this._sourcepath = value;
                    this.OnSourcepathChanged(e);
                    this.OnPropertyChanged("Sourcepath", e);
                }
            }
        }
        
        /// <summary>
        /// The destdir property
        /// </summary>
        [XmlElementNameAttribute("destdir")]
        [XmlAttributeAttribute(true)]
        public virtual string Destdir
        {
            get
            {
                return this._destdir;
            }
            set
            {
                if ((this._destdir != value))
                {
                    string old = this._destdir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDestdirChanging(e);
                    this.OnPropertyChanging("Destdir", e);
                    this._destdir = value;
                    this.OnDestdirChanged(e);
                    this.OnPropertyChanged("Destdir", e);
                }
            }
        }
        
        /// <summary>
        /// The packagenames property
        /// </summary>
        [XmlElementNameAttribute("packagenames")]
        [XmlAttributeAttribute(true)]
        public virtual string Packagenames
        {
            get
            {
                return this._packagenames;
            }
            set
            {
                if ((this._packagenames != value))
                {
                    string old = this._packagenames;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPackagenamesChanging(e);
                    this.OnPropertyChanging("Packagenames", e);
                    this._packagenames = value;
                    this.OnPackagenamesChanged(e);
                    this.OnPropertyChanged("Packagenames", e);
                }
            }
        }
        
        /// <summary>
        /// The defaultexcludes property
        /// </summary>
        [XmlElementNameAttribute("defaultexcludes")]
        [XmlAttributeAttribute(true)]
        public virtual string Defaultexcludes
        {
            get
            {
                return this._defaultexcludes;
            }
            set
            {
                if ((this._defaultexcludes != value))
                {
                    string old = this._defaultexcludes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultexcludesChanging(e);
                    this.OnPropertyChanging("Defaultexcludes", e);
                    this._defaultexcludes = value;
                    this.OnDefaultexcludesChanged(e);
                    this.OnPropertyChanged("Defaultexcludes", e);
                }
            }
        }
        
        /// <summary>
        /// The author property
        /// </summary>
        [XmlElementNameAttribute("author")]
        [XmlAttributeAttribute(true)]
        public virtual string Author
        {
            get
            {
                return this._author;
            }
            set
            {
                if ((this._author != value))
                {
                    string old = this._author;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuthorChanging(e);
                    this.OnPropertyChanging("Author", e);
                    this._author = value;
                    this.OnAuthorChanged(e);
                    this.OnPropertyChanged("Author", e);
                }
            }
        }
        
        /// <summary>
        /// The version property
        /// </summary>
        [XmlElementNameAttribute("version")]
        [XmlAttributeAttribute(true)]
        public virtual string Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    string old = this._version;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVersionChanging(e);
                    this.OnPropertyChanging("Version", e);
                    this._version = value;
                    this.OnVersionChanged(e);
                    this.OnPropertyChanged("Version", e);
                }
            }
        }
        
        /// <summary>
        /// The use property
        /// </summary>
        [XmlElementNameAttribute("use")]
        [XmlAttributeAttribute(true)]
        public virtual string Use
        {
            get
            {
                return this._use;
            }
            set
            {
                if ((this._use != value))
                {
                    string old = this._use;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUseChanging(e);
                    this.OnPropertyChanging("Use", e);
                    this._use = value;
                    this.OnUseChanged(e);
                    this.OnPropertyChanged("Use", e);
                }
            }
        }
        
        /// <summary>
        /// The windowtitle property
        /// </summary>
        [XmlElementNameAttribute("windowtitle")]
        [XmlAttributeAttribute(true)]
        public virtual string Windowtitle
        {
            get
            {
                return this._windowtitle;
            }
            set
            {
                if ((this._windowtitle != value))
                {
                    string old = this._windowtitle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindowtitleChanging(e);
                    this.OnPropertyChanging("Windowtitle", e);
                    this._windowtitle = value;
                    this.OnWindowtitleChanged(e);
                    this.OnPropertyChanged("Windowtitle", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Javadoc/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Sourcepath property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourcepathChanging;
        
        /// <summary>
        /// Gets fired when the Sourcepath property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourcepathChanged;
        
        /// <summary>
        /// Gets fired before the Destdir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DestdirChanging;
        
        /// <summary>
        /// Gets fired when the Destdir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DestdirChanged;
        
        /// <summary>
        /// Gets fired before the Packagenames property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PackagenamesChanging;
        
        /// <summary>
        /// Gets fired when the Packagenames property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PackagenamesChanged;
        
        /// <summary>
        /// Gets fired before the Defaultexcludes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanging;
        
        /// <summary>
        /// Gets fired when the Defaultexcludes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanged;
        
        /// <summary>
        /// Gets fired before the Author property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuthorChanging;
        
        /// <summary>
        /// Gets fired when the Author property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuthorChanged;
        
        /// <summary>
        /// Gets fired before the Version property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanging;
        
        /// <summary>
        /// Gets fired when the Version property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanged;
        
        /// <summary>
        /// Gets fired before the Use property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UseChanging;
        
        /// <summary>
        /// Gets fired when the Use property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UseChanged;
        
        /// <summary>
        /// Gets fired before the Windowtitle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindowtitleChanging;
        
        /// <summary>
        /// Gets fired when the Windowtitle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindowtitleChanged;
        
        /// <summary>
        /// Raises the SourcepathChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourcepathChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourcepathChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourcepathChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourcepathChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourcepathChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DestdirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDestdirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DestdirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DestdirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDestdirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DestdirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PackagenamesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPackagenamesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PackagenamesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PackagenamesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPackagenamesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PackagenamesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultexcludesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultexcludesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultexcludesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultexcludesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultexcludesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultexcludesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuthorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuthorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuthorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuthorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuthorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuthorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindowtitleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindowtitleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindowtitleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindowtitleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindowtitleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindowtitleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SOURCEPATH"))
            {
                return this.Sourcepath;
            }
            if ((attribute == "DESTDIR"))
            {
                return this.Destdir;
            }
            if ((attribute == "PACKAGENAMES"))
            {
                return this.Packagenames;
            }
            if ((attribute == "DEFAULTEXCLUDES"))
            {
                return this.Defaultexcludes;
            }
            if ((attribute == "AUTHOR"))
            {
                return this.Author;
            }
            if ((attribute == "VERSION"))
            {
                return this.Version;
            }
            if ((attribute == "USE"))
            {
                return this.Use;
            }
            if ((attribute == "WINDOWTITLE"))
            {
                return this.Windowtitle;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SOURCEPATH"))
            {
                this.Sourcepath = ((string)(value));
                return;
            }
            if ((feature == "DESTDIR"))
            {
                this.Destdir = ((string)(value));
                return;
            }
            if ((feature == "PACKAGENAMES"))
            {
                this.Packagenames = ((string)(value));
                return;
            }
            if ((feature == "DEFAULTEXCLUDES"))
            {
                this.Defaultexcludes = ((string)(value));
                return;
            }
            if ((feature == "AUTHOR"))
            {
                this.Author = ((string)(value));
                return;
            }
            if ((feature == "VERSION"))
            {
                this.Version = ((string)(value));
                return;
            }
            if ((feature == "USE"))
            {
                this.Use = ((string)(value));
                return;
            }
            if ((feature == "WINDOWTITLE"))
            {
                this.Windowtitle = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Javadoc/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sourcepath property
        /// </summary>
        private sealed class SourcepathProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourcepathProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Sourcepath;
                }
                set
                {
                    this.ModelElement.Sourcepath = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourcepathChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourcepathChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the destdir property
        /// </summary>
        private sealed class DestdirProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DestdirProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Destdir;
                }
                set
                {
                    this.ModelElement.Destdir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DestdirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DestdirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the packagenames property
        /// </summary>
        private sealed class PackagenamesProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PackagenamesProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Packagenames;
                }
                set
                {
                    this.ModelElement.Packagenames = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PackagenamesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PackagenamesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultexcludes property
        /// </summary>
        private sealed class DefaultexcludesProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultexcludesProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Defaultexcludes;
                }
                set
                {
                    this.ModelElement.Defaultexcludes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultexcludesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultexcludesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the author property
        /// </summary>
        private sealed class AuthorProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuthorProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Author;
                }
                set
                {
                    this.ModelElement.Author = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuthorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AuthorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the version property
        /// </summary>
        private sealed class VersionProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VersionProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Version;
                }
                set
                {
                    this.ModelElement.Version = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VersionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VersionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the use property
        /// </summary>
        private sealed class UseProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UseProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Use;
                }
                set
                {
                    this.ModelElement.Use = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the windowtitle property
        /// </summary>
        private sealed class WindowtitleProxy : ModelPropertyChange<IJavadoc, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindowtitleProxy(IJavadoc modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Windowtitle;
                }
                set
                {
                    this.ModelElement.Windowtitle = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindowtitleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.WindowtitleChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the ArchiveTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//ArchiveTask/")]
    public abstract class ArchiveTask : PreDefinedTask, IArchiveTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ArchiveTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//ArchiveTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Jar class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Jar/")]
    public class Jar : ArchiveTask, IJar, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Jarfile property
        /// </summary>
        private string _jarfile;
        
        /// <summary>
        /// The backing field for the Basedir property
        /// </summary>
        private string _basedir;
        
        /// <summary>
        /// The backing field for the Compress property
        /// </summary>
        private string _compress;
        
        /// <summary>
        /// The backing field for the Encoding property
        /// </summary>
        private string _encoding;
        
        /// <summary>
        /// The backing field for the Manifest property
        /// </summary>
        private string _manifest;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The jarfile property
        /// </summary>
        [XmlElementNameAttribute("jarfile")]
        [XmlAttributeAttribute(true)]
        public virtual string Jarfile
        {
            get
            {
                return this._jarfile;
            }
            set
            {
                if ((this._jarfile != value))
                {
                    string old = this._jarfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnJarfileChanging(e);
                    this.OnPropertyChanging("Jarfile", e);
                    this._jarfile = value;
                    this.OnJarfileChanged(e);
                    this.OnPropertyChanged("Jarfile", e);
                }
            }
        }
        
        /// <summary>
        /// The basedir property
        /// </summary>
        [XmlElementNameAttribute("basedir")]
        [XmlAttributeAttribute(true)]
        public virtual string Basedir
        {
            get
            {
                return this._basedir;
            }
            set
            {
                if ((this._basedir != value))
                {
                    string old = this._basedir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBasedirChanging(e);
                    this.OnPropertyChanging("Basedir", e);
                    this._basedir = value;
                    this.OnBasedirChanged(e);
                    this.OnPropertyChanged("Basedir", e);
                }
            }
        }
        
        /// <summary>
        /// The compress property
        /// </summary>
        [XmlElementNameAttribute("compress")]
        [XmlAttributeAttribute(true)]
        public virtual string Compress
        {
            get
            {
                return this._compress;
            }
            set
            {
                if ((this._compress != value))
                {
                    string old = this._compress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompressChanging(e);
                    this.OnPropertyChanging("Compress", e);
                    this._compress = value;
                    this.OnCompressChanged(e);
                    this.OnPropertyChanged("Compress", e);
                }
            }
        }
        
        /// <summary>
        /// The encoding property
        /// </summary>
        [XmlElementNameAttribute("encoding")]
        [XmlAttributeAttribute(true)]
        public virtual string Encoding
        {
            get
            {
                return this._encoding;
            }
            set
            {
                if ((this._encoding != value))
                {
                    string old = this._encoding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEncodingChanging(e);
                    this.OnPropertyChanging("Encoding", e);
                    this._encoding = value;
                    this.OnEncodingChanged(e);
                    this.OnPropertyChanged("Encoding", e);
                }
            }
        }
        
        /// <summary>
        /// The manifest property
        /// </summary>
        [XmlElementNameAttribute("manifest")]
        [XmlAttributeAttribute(true)]
        public virtual string Manifest
        {
            get
            {
                return this._manifest;
            }
            set
            {
                if ((this._manifest != value))
                {
                    string old = this._manifest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManifestChanging(e);
                    this.OnPropertyChanging("Manifest", e);
                    this._manifest = value;
                    this.OnManifestChanged(e);
                    this.OnPropertyChanged("Manifest", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Jar/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Jarfile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JarfileChanging;
        
        /// <summary>
        /// Gets fired when the Jarfile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> JarfileChanged;
        
        /// <summary>
        /// Gets fired before the Basedir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasedirChanging;
        
        /// <summary>
        /// Gets fired when the Basedir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasedirChanged;
        
        /// <summary>
        /// Gets fired before the Compress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompressChanging;
        
        /// <summary>
        /// Gets fired when the Compress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompressChanged;
        
        /// <summary>
        /// Gets fired before the Encoding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EncodingChanging;
        
        /// <summary>
        /// Gets fired when the Encoding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EncodingChanged;
        
        /// <summary>
        /// Gets fired before the Manifest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManifestChanging;
        
        /// <summary>
        /// Gets fired when the Manifest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManifestChanged;
        
        /// <summary>
        /// Raises the JarfileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJarfileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JarfileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the JarfileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnJarfileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.JarfileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasedirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasedirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasedirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasedirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasedirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasedirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CompressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CompressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EncodingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncodingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EncodingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EncodingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncodingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EncodingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManifestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManifestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManifestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManifestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManifestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManifestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "JARFILE"))
            {
                return this.Jarfile;
            }
            if ((attribute == "BASEDIR"))
            {
                return this.Basedir;
            }
            if ((attribute == "COMPRESS"))
            {
                return this.Compress;
            }
            if ((attribute == "ENCODING"))
            {
                return this.Encoding;
            }
            if ((attribute == "MANIFEST"))
            {
                return this.Manifest;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "JARFILE"))
            {
                this.Jarfile = ((string)(value));
                return;
            }
            if ((feature == "BASEDIR"))
            {
                this.Basedir = ((string)(value));
                return;
            }
            if ((feature == "COMPRESS"))
            {
                this.Compress = ((string)(value));
                return;
            }
            if ((feature == "ENCODING"))
            {
                this.Encoding = ((string)(value));
                return;
            }
            if ((feature == "MANIFEST"))
            {
                this.Manifest = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Jar/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the jarfile property
        /// </summary>
        private sealed class JarfileProxy : ModelPropertyChange<IJar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public JarfileProxy(IJar modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Jarfile;
                }
                set
                {
                    this.ModelElement.Jarfile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JarfileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.JarfileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the basedir property
        /// </summary>
        private sealed class BasedirProxy : ModelPropertyChange<IJar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BasedirProxy(IJar modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Basedir;
                }
                set
                {
                    this.ModelElement.Basedir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasedirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasedirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the compress property
        /// </summary>
        private sealed class CompressProxy : ModelPropertyChange<IJar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CompressProxy(IJar modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Compress;
                }
                set
                {
                    this.ModelElement.Compress = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CompressChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CompressChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the encoding property
        /// </summary>
        private sealed class EncodingProxy : ModelPropertyChange<IJar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EncodingProxy(IJar modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Encoding;
                }
                set
                {
                    this.ModelElement.Encoding = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EncodingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EncodingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the manifest property
        /// </summary>
        private sealed class ManifestProxy : ModelPropertyChange<IJar, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManifestProxy(IJar modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Manifest;
                }
                set
                {
                    this.ModelElement.Manifest = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ManifestChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ManifestChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the FileTask class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//FileTask/")]
    public abstract class FileTask : PreDefinedTask, IFileTask, IModelElement
    {
        
        private static IClass _classInstance;
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileTask/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//FileTask/")));
            }
            return _classInstance;
        }
    }
    
    /// <summary>
    /// The default implementation of the Mkdir class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Mkdir/")]
    public class Mkdir : FileTask, IMkdir, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private string _dir;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The dir property
        /// </summary>
        [XmlElementNameAttribute("dir")]
        [XmlAttributeAttribute(true)]
        public virtual string Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    string old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Mkdir/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DIR"))
            {
                return this.Dir;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DIR"))
            {
                this.Dir = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Mkdir/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IMkdir, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IMkdir modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Copy class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Copy/")]
    public class Copy : FileTask, ICopy, IModelElement
    {
        
        /// <summary>
        /// The backing field for the File property
        /// </summary>
        private string _file;
        
        /// <summary>
        /// The backing field for the Presservelastmodified property
        /// </summary>
        private string _presservelastmodified;
        
        /// <summary>
        /// The backing field for the Tofile property
        /// </summary>
        private string _tofile;
        
        /// <summary>
        /// The backing field for the Todir property
        /// </summary>
        private string _todir;
        
        /// <summary>
        /// The backing field for the Overwrite property
        /// </summary>
        private string _overwrite;
        
        /// <summary>
        /// The backing field for the Filtering property
        /// </summary>
        private string _filtering;
        
        /// <summary>
        /// The backing field for the Flatten property
        /// </summary>
        private string _flatten;
        
        /// <summary>
        /// The backing field for the IncludeEmptyDirs property
        /// </summary>
        private string _includeEmptyDirs;
        
        /// <summary>
        /// The backing field for the Fileset property
        /// </summary>
        private IFileSet _fileset;
        
        /// <summary>
        /// The backing field for the Filterset property
        /// </summary>
        private IFilterSet _filterset;
        
        /// <summary>
        /// The backing field for the Mapper property
        /// </summary>
        private IMapper _mapper;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The file property
        /// </summary>
        [XmlElementNameAttribute("file")]
        [XmlAttributeAttribute(true)]
        public virtual string File
        {
            get
            {
                return this._file;
            }
            set
            {
                if ((this._file != value))
                {
                    string old = this._file;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFileChanging(e);
                    this.OnPropertyChanging("File", e);
                    this._file = value;
                    this.OnFileChanged(e);
                    this.OnPropertyChanged("File", e);
                }
            }
        }
        
        /// <summary>
        /// The presservelastmodified property
        /// </summary>
        [XmlElementNameAttribute("presservelastmodified")]
        [XmlAttributeAttribute(true)]
        public virtual string Presservelastmodified
        {
            get
            {
                return this._presservelastmodified;
            }
            set
            {
                if ((this._presservelastmodified != value))
                {
                    string old = this._presservelastmodified;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPresservelastmodifiedChanging(e);
                    this.OnPropertyChanging("Presservelastmodified", e);
                    this._presservelastmodified = value;
                    this.OnPresservelastmodifiedChanged(e);
                    this.OnPropertyChanged("Presservelastmodified", e);
                }
            }
        }
        
        /// <summary>
        /// The tofile property
        /// </summary>
        [XmlElementNameAttribute("tofile")]
        [XmlAttributeAttribute(true)]
        public virtual string Tofile
        {
            get
            {
                return this._tofile;
            }
            set
            {
                if ((this._tofile != value))
                {
                    string old = this._tofile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTofileChanging(e);
                    this.OnPropertyChanging("Tofile", e);
                    this._tofile = value;
                    this.OnTofileChanged(e);
                    this.OnPropertyChanged("Tofile", e);
                }
            }
        }
        
        /// <summary>
        /// The todir property
        /// </summary>
        [XmlElementNameAttribute("todir")]
        [XmlAttributeAttribute(true)]
        public virtual string Todir
        {
            get
            {
                return this._todir;
            }
            set
            {
                if ((this._todir != value))
                {
                    string old = this._todir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTodirChanging(e);
                    this.OnPropertyChanging("Todir", e);
                    this._todir = value;
                    this.OnTodirChanged(e);
                    this.OnPropertyChanged("Todir", e);
                }
            }
        }
        
        /// <summary>
        /// The overwrite property
        /// </summary>
        [XmlElementNameAttribute("overwrite")]
        [XmlAttributeAttribute(true)]
        public virtual string Overwrite
        {
            get
            {
                return this._overwrite;
            }
            set
            {
                if ((this._overwrite != value))
                {
                    string old = this._overwrite;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverwriteChanging(e);
                    this.OnPropertyChanging("Overwrite", e);
                    this._overwrite = value;
                    this.OnOverwriteChanged(e);
                    this.OnPropertyChanged("Overwrite", e);
                }
            }
        }
        
        /// <summary>
        /// The filtering property
        /// </summary>
        [XmlElementNameAttribute("filtering")]
        [XmlAttributeAttribute(true)]
        public virtual string Filtering
        {
            get
            {
                return this._filtering;
            }
            set
            {
                if ((this._filtering != value))
                {
                    string old = this._filtering;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilteringChanging(e);
                    this.OnPropertyChanging("Filtering", e);
                    this._filtering = value;
                    this.OnFilteringChanged(e);
                    this.OnPropertyChanged("Filtering", e);
                }
            }
        }
        
        /// <summary>
        /// The flatten property
        /// </summary>
        [XmlElementNameAttribute("flatten")]
        [XmlAttributeAttribute(true)]
        public virtual string Flatten
        {
            get
            {
                return this._flatten;
            }
            set
            {
                if ((this._flatten != value))
                {
                    string old = this._flatten;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFlattenChanging(e);
                    this.OnPropertyChanging("Flatten", e);
                    this._flatten = value;
                    this.OnFlattenChanged(e);
                    this.OnPropertyChanged("Flatten", e);
                }
            }
        }
        
        /// <summary>
        /// The includeEmptyDirs property
        /// </summary>
        [XmlElementNameAttribute("includeEmptyDirs")]
        [XmlAttributeAttribute(true)]
        public virtual string IncludeEmptyDirs
        {
            get
            {
                return this._includeEmptyDirs;
            }
            set
            {
                if ((this._includeEmptyDirs != value))
                {
                    string old = this._includeEmptyDirs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncludeEmptyDirsChanging(e);
                    this.OnPropertyChanging("IncludeEmptyDirs", e);
                    this._includeEmptyDirs = value;
                    this.OnIncludeEmptyDirsChanged(e);
                    this.OnPropertyChanged("IncludeEmptyDirs", e);
                }
            }
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        [XmlElementNameAttribute("fileset")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IFileSet Fileset
        {
            get
            {
                return this._fileset;
            }
            set
            {
                if ((this._fileset != value))
                {
                    IFileSet old = this._fileset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilesetChanging(e);
                    this.OnPropertyChanging("Fileset", e);
                    this._fileset = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetFileset;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetFileset;
                    }
                    this.OnFilesetChanged(e);
                    this.OnPropertyChanged("Fileset", e);
                }
            }
        }
        
        /// <summary>
        /// The filterset property
        /// </summary>
        [XmlElementNameAttribute("filterset")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IFilterSet Filterset
        {
            get
            {
                return this._filterset;
            }
            set
            {
                if ((this._filterset != value))
                {
                    IFilterSet old = this._filterset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFiltersetChanging(e);
                    this.OnPropertyChanging("Filterset", e);
                    this._filterset = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetFilterset;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetFilterset;
                    }
                    this.OnFiltersetChanged(e);
                    this.OnPropertyChanged("Filterset", e);
                }
            }
        }
        
        /// <summary>
        /// The mapper property
        /// </summary>
        [XmlElementNameAttribute("mapper")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IMapper Mapper
        {
            get
            {
                return this._mapper;
            }
            set
            {
                if ((this._mapper != value))
                {
                    IMapper old = this._mapper;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMapperChanging(e);
                    this.OnPropertyChanging("Mapper", e);
                    this._mapper = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetMapper;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetMapper;
                    }
                    this.OnMapperChanged(e);
                    this.OnPropertyChanged("Mapper", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new CopyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CopyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Copy/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Presservelastmodified property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PresservelastmodifiedChanging;
        
        /// <summary>
        /// Gets fired when the Presservelastmodified property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PresservelastmodifiedChanged;
        
        /// <summary>
        /// Gets fired before the Tofile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TofileChanging;
        
        /// <summary>
        /// Gets fired when the Tofile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TofileChanged;
        
        /// <summary>
        /// Gets fired before the Todir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TodirChanging;
        
        /// <summary>
        /// Gets fired when the Todir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TodirChanged;
        
        /// <summary>
        /// Gets fired before the Overwrite property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverwriteChanging;
        
        /// <summary>
        /// Gets fired when the Overwrite property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverwriteChanged;
        
        /// <summary>
        /// Gets fired before the Filtering property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilteringChanging;
        
        /// <summary>
        /// Gets fired when the Filtering property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilteringChanged;
        
        /// <summary>
        /// Gets fired before the Flatten property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlattenChanging;
        
        /// <summary>
        /// Gets fired when the Flatten property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlattenChanged;
        
        /// <summary>
        /// Gets fired before the IncludeEmptyDirs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanging;
        
        /// <summary>
        /// Gets fired when the IncludeEmptyDirs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanged;
        
        /// <summary>
        /// Gets fired before the Fileset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilesetChanging;
        
        /// <summary>
        /// Gets fired when the Fileset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilesetChanged;
        
        /// <summary>
        /// Gets fired before the Filterset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FiltersetChanging;
        
        /// <summary>
        /// Gets fired when the Filterset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FiltersetChanged;
        
        /// <summary>
        /// Gets fired before the Mapper property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MapperChanging;
        
        /// <summary>
        /// Gets fired when the Mapper property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MapperChanged;
        
        /// <summary>
        /// Raises the FileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PresservelastmodifiedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresservelastmodifiedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PresservelastmodifiedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PresservelastmodifiedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPresservelastmodifiedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PresservelastmodifiedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TofileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTofileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TofileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TofileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTofileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TofileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TodirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTodirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TodirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TodirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTodirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TodirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverwriteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverwriteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverwriteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverwriteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverwriteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverwriteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilteringChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilteringChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilteringChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilteringChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilteringChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilteringChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FlattenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlattenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlattenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FlattenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlattenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlattenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludeEmptyDirsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludeEmptyDirsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludeEmptyDirsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludeEmptyDirsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludeEmptyDirsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludeEmptyDirsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilesetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilesetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilesetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilesetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilesetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilesetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Fileset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFileset(object sender, System.EventArgs eventArgs)
        {
            this.Fileset = null;
        }
        
        /// <summary>
        /// Raises the FiltersetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFiltersetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FiltersetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FiltersetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFiltersetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FiltersetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Filterset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFilterset(object sender, System.EventArgs eventArgs)
        {
            this.Filterset = null;
        }
        
        /// <summary>
        /// Raises the MapperChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMapperChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MapperChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MapperChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMapperChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MapperChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Mapper property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMapper(object sender, System.EventArgs eventArgs)
        {
            this.Mapper = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Fileset))
            {
                return ModelHelper.CreatePath("Fileset");
            }
            if ((element == this.Filterset))
            {
                return ModelHelper.CreatePath("Filterset");
            }
            if ((element == this.Mapper))
            {
                return ModelHelper.CreatePath("Mapper");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FILESET"))
            {
                return this.Fileset;
            }
            if ((reference == "FILTERSET"))
            {
                return this.Filterset;
            }
            if ((reference == "MAPPER"))
            {
                return this.Mapper;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FILE"))
            {
                return this.File;
            }
            if ((attribute == "PRESSERVELASTMODIFIED"))
            {
                return this.Presservelastmodified;
            }
            if ((attribute == "TOFILE"))
            {
                return this.Tofile;
            }
            if ((attribute == "TODIR"))
            {
                return this.Todir;
            }
            if ((attribute == "OVERWRITE"))
            {
                return this.Overwrite;
            }
            if ((attribute == "FILTERING"))
            {
                return this.Filtering;
            }
            if ((attribute == "FLATTEN"))
            {
                return this.Flatten;
            }
            if ((attribute == "INCLUDEEMPTYDIRS"))
            {
                return this.IncludeEmptyDirs;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FILESET"))
            {
                this.Fileset = ((IFileSet)(value));
                return;
            }
            if ((feature == "FILTERSET"))
            {
                this.Filterset = ((IFilterSet)(value));
                return;
            }
            if ((feature == "MAPPER"))
            {
                this.Mapper = ((IMapper)(value));
                return;
            }
            if ((feature == "FILE"))
            {
                this.File = ((string)(value));
                return;
            }
            if ((feature == "PRESSERVELASTMODIFIED"))
            {
                this.Presservelastmodified = ((string)(value));
                return;
            }
            if ((feature == "TOFILE"))
            {
                this.Tofile = ((string)(value));
                return;
            }
            if ((feature == "TODIR"))
            {
                this.Todir = ((string)(value));
                return;
            }
            if ((feature == "OVERWRITE"))
            {
                this.Overwrite = ((string)(value));
                return;
            }
            if ((feature == "FILTERING"))
            {
                this.Filtering = ((string)(value));
                return;
            }
            if ((feature == "FLATTEN"))
            {
                this.Flatten = ((string)(value));
                return;
            }
            if ((feature == "INCLUDEEMPTYDIRS"))
            {
                this.IncludeEmptyDirs = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Fileset"))
            {
                return new FilesetProxy(this);
            }
            if ((attribute == "Filterset"))
            {
                return new FiltersetProxy(this);
            }
            if ((attribute == "Mapper"))
            {
                return new MapperProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Fileset"))
            {
                return new FilesetProxy(this);
            }
            if ((reference == "Filterset"))
            {
                return new FiltersetProxy(this);
            }
            if ((reference == "Mapper"))
            {
                return new MapperProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Copy/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Copy class
        /// </summary>
        public class CopyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Copy _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CopyChildrenCollection(Copy parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Fileset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Filterset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mapper != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FilesetChanged += this.PropagateValueChanges;
                this._parent.FiltersetChanged += this.PropagateValueChanges;
                this._parent.MapperChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FilesetChanged -= this.PropagateValueChanges;
                this._parent.FiltersetChanged -= this.PropagateValueChanges;
                this._parent.MapperChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Fileset == null))
                {
                    IFileSet filesetCasted = item.As<IFileSet>();
                    if ((filesetCasted != null))
                    {
                        this._parent.Fileset = filesetCasted;
                        return;
                    }
                }
                if ((this._parent.Filterset == null))
                {
                    IFilterSet filtersetCasted = item.As<IFilterSet>();
                    if ((filtersetCasted != null))
                    {
                        this._parent.Filterset = filtersetCasted;
                        return;
                    }
                }
                if ((this._parent.Mapper == null))
                {
                    IMapper mapperCasted = item.As<IMapper>();
                    if ((mapperCasted != null))
                    {
                        this._parent.Mapper = mapperCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Fileset = null;
                this._parent.Filterset = null;
                this._parent.Mapper = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Fileset))
                {
                    return true;
                }
                if ((item == this._parent.Filterset))
                {
                    return true;
                }
                if ((item == this._parent.Mapper))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Fileset != null))
                {
                    array[arrayIndex] = this._parent.Fileset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Filterset != null))
                {
                    array[arrayIndex] = this._parent.Filterset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mapper != null))
                {
                    array[arrayIndex] = this._parent.Mapper;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Fileset == item))
                {
                    this._parent.Fileset = null;
                    return true;
                }
                if ((this._parent.Filterset == item))
                {
                    this._parent.Filterset = null;
                    return true;
                }
                if ((this._parent.Mapper == item))
                {
                    this._parent.Mapper = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Fileset).Concat(this._parent.Filterset).Concat(this._parent.Mapper).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Copy class
        /// </summary>
        public class CopyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Copy _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CopyReferencedElementsCollection(Copy parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Fileset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Filterset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Mapper != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FilesetChanged += this.PropagateValueChanges;
                this._parent.FiltersetChanged += this.PropagateValueChanges;
                this._parent.MapperChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FilesetChanged -= this.PropagateValueChanges;
                this._parent.FiltersetChanged -= this.PropagateValueChanges;
                this._parent.MapperChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Fileset == null))
                {
                    IFileSet filesetCasted = item.As<IFileSet>();
                    if ((filesetCasted != null))
                    {
                        this._parent.Fileset = filesetCasted;
                        return;
                    }
                }
                if ((this._parent.Filterset == null))
                {
                    IFilterSet filtersetCasted = item.As<IFilterSet>();
                    if ((filtersetCasted != null))
                    {
                        this._parent.Filterset = filtersetCasted;
                        return;
                    }
                }
                if ((this._parent.Mapper == null))
                {
                    IMapper mapperCasted = item.As<IMapper>();
                    if ((mapperCasted != null))
                    {
                        this._parent.Mapper = mapperCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Fileset = null;
                this._parent.Filterset = null;
                this._parent.Mapper = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Fileset))
                {
                    return true;
                }
                if ((item == this._parent.Filterset))
                {
                    return true;
                }
                if ((item == this._parent.Mapper))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Fileset != null))
                {
                    array[arrayIndex] = this._parent.Fileset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Filterset != null))
                {
                    array[arrayIndex] = this._parent.Filterset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Mapper != null))
                {
                    array[arrayIndex] = this._parent.Mapper;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Fileset == item))
                {
                    this._parent.Fileset = null;
                    return true;
                }
                if ((this._parent.Filterset == item))
                {
                    this._parent.Filterset = null;
                    return true;
                }
                if ((this._parent.Mapper == item))
                {
                    this._parent.Mapper = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Fileset).Concat(this._parent.Filterset).Concat(this._parent.Mapper).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the file property
        /// </summary>
        private sealed class FileProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.File;
                }
                set
                {
                    this.ModelElement.File = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the presservelastmodified property
        /// </summary>
        private sealed class PresservelastmodifiedProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PresservelastmodifiedProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Presservelastmodified;
                }
                set
                {
                    this.ModelElement.Presservelastmodified = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PresservelastmodifiedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PresservelastmodifiedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tofile property
        /// </summary>
        private sealed class TofileProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TofileProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Tofile;
                }
                set
                {
                    this.ModelElement.Tofile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TofileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TofileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the todir property
        /// </summary>
        private sealed class TodirProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TodirProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Todir;
                }
                set
                {
                    this.ModelElement.Todir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TodirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TodirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overwrite property
        /// </summary>
        private sealed class OverwriteProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverwriteProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Overwrite;
                }
                set
                {
                    this.ModelElement.Overwrite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverwriteChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OverwriteChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the filtering property
        /// </summary>
        private sealed class FilteringProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilteringProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Filtering;
                }
                set
                {
                    this.ModelElement.Filtering = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilteringChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilteringChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the flatten property
        /// </summary>
        private sealed class FlattenProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FlattenProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Flatten;
                }
                set
                {
                    this.ModelElement.Flatten = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FlattenChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FlattenChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the includeEmptyDirs property
        /// </summary>
        private sealed class IncludeEmptyDirsProxy : ModelPropertyChange<ICopy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncludeEmptyDirsProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IncludeEmptyDirs;
                }
                set
                {
                    this.ModelElement.IncludeEmptyDirs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludeEmptyDirsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludeEmptyDirsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fileset property
        /// </summary>
        private sealed class FilesetProxy : ModelPropertyChange<ICopy, IFileSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilesetProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFileSet Value
            {
                get
                {
                    return this.ModelElement.Fileset;
                }
                set
                {
                    this.ModelElement.Fileset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilesetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilesetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the filterset property
        /// </summary>
        private sealed class FiltersetProxy : ModelPropertyChange<ICopy, IFilterSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FiltersetProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFilterSet Value
            {
                get
                {
                    return this.ModelElement.Filterset;
                }
                set
                {
                    this.ModelElement.Filterset = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FiltersetChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FiltersetChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mapper property
        /// </summary>
        private sealed class MapperProxy : ModelPropertyChange<ICopy, IMapper>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MapperProxy(ICopy modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMapper Value
            {
                get
                {
                    return this.ModelElement.Mapper;
                }
                set
                {
                    this.ModelElement.Mapper = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MapperChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MapperChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the Delete class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/atl/atlTransformations/Ant")]
    [XmlNamespacePrefixAttribute("Ant")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/atl/atlTransformations/Ant#//Delete/")]
    public class Delete : FileTask, IDelete, IModelElement
    {
        
        /// <summary>
        /// The backing field for the File property
        /// </summary>
        private string _file;
        
        /// <summary>
        /// The backing field for the Dir property
        /// </summary>
        private string _dir;
        
        /// <summary>
        /// The backing field for the Verbose property
        /// </summary>
        private string _verbose;
        
        /// <summary>
        /// The backing field for the Quiet property
        /// </summary>
        private string _quiet;
        
        /// <summary>
        /// The backing field for the Failonerror property
        /// </summary>
        private string _failonerror;
        
        /// <summary>
        /// The backing field for the IncludeEmptyDirs property
        /// </summary>
        private string _includeEmptyDirs;
        
        /// <summary>
        /// The backing field for the Includes property
        /// </summary>
        private string _includes;
        
        /// <summary>
        /// The backing field for the Includesfile property
        /// </summary>
        private string _includesfile;
        
        /// <summary>
        /// The backing field for the Excludes property
        /// </summary>
        private string _excludes;
        
        /// <summary>
        /// The backing field for the Excludesfile property
        /// </summary>
        private string _excludesfile;
        
        /// <summary>
        /// The backing field for the Defaultexcludes property
        /// </summary>
        private string _defaultexcludes;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The file property
        /// </summary>
        [XmlElementNameAttribute("file")]
        [XmlAttributeAttribute(true)]
        public virtual string File
        {
            get
            {
                return this._file;
            }
            set
            {
                if ((this._file != value))
                {
                    string old = this._file;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFileChanging(e);
                    this.OnPropertyChanging("File", e);
                    this._file = value;
                    this.OnFileChanged(e);
                    this.OnPropertyChanged("File", e);
                }
            }
        }
        
        /// <summary>
        /// The dir property
        /// </summary>
        [XmlElementNameAttribute("dir")]
        [XmlAttributeAttribute(true)]
        public virtual string Dir
        {
            get
            {
                return this._dir;
            }
            set
            {
                if ((this._dir != value))
                {
                    string old = this._dir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirChanging(e);
                    this.OnPropertyChanging("Dir", e);
                    this._dir = value;
                    this.OnDirChanged(e);
                    this.OnPropertyChanged("Dir", e);
                }
            }
        }
        
        /// <summary>
        /// The verbose property
        /// </summary>
        [XmlElementNameAttribute("verbose")]
        [XmlAttributeAttribute(true)]
        public virtual string Verbose
        {
            get
            {
                return this._verbose;
            }
            set
            {
                if ((this._verbose != value))
                {
                    string old = this._verbose;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVerboseChanging(e);
                    this.OnPropertyChanging("Verbose", e);
                    this._verbose = value;
                    this.OnVerboseChanged(e);
                    this.OnPropertyChanged("Verbose", e);
                }
            }
        }
        
        /// <summary>
        /// The quiet property
        /// </summary>
        [XmlElementNameAttribute("quiet")]
        [XmlAttributeAttribute(true)]
        public virtual string Quiet
        {
            get
            {
                return this._quiet;
            }
            set
            {
                if ((this._quiet != value))
                {
                    string old = this._quiet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuietChanging(e);
                    this.OnPropertyChanging("Quiet", e);
                    this._quiet = value;
                    this.OnQuietChanged(e);
                    this.OnPropertyChanged("Quiet", e);
                }
            }
        }
        
        /// <summary>
        /// The failonerror property
        /// </summary>
        [XmlElementNameAttribute("failonerror")]
        [XmlAttributeAttribute(true)]
        public virtual string Failonerror
        {
            get
            {
                return this._failonerror;
            }
            set
            {
                if ((this._failonerror != value))
                {
                    string old = this._failonerror;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailonerrorChanging(e);
                    this.OnPropertyChanging("Failonerror", e);
                    this._failonerror = value;
                    this.OnFailonerrorChanged(e);
                    this.OnPropertyChanged("Failonerror", e);
                }
            }
        }
        
        /// <summary>
        /// The includeEmptyDirs property
        /// </summary>
        [XmlElementNameAttribute("includeEmptyDirs")]
        [XmlAttributeAttribute(true)]
        public virtual string IncludeEmptyDirs
        {
            get
            {
                return this._includeEmptyDirs;
            }
            set
            {
                if ((this._includeEmptyDirs != value))
                {
                    string old = this._includeEmptyDirs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncludeEmptyDirsChanging(e);
                    this.OnPropertyChanging("IncludeEmptyDirs", e);
                    this._includeEmptyDirs = value;
                    this.OnIncludeEmptyDirsChanged(e);
                    this.OnPropertyChanged("IncludeEmptyDirs", e);
                }
            }
        }
        
        /// <summary>
        /// The includes property
        /// </summary>
        [XmlElementNameAttribute("includes")]
        [XmlAttributeAttribute(true)]
        public virtual string Includes
        {
            get
            {
                return this._includes;
            }
            set
            {
                if ((this._includes != value))
                {
                    string old = this._includes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncludesChanging(e);
                    this.OnPropertyChanging("Includes", e);
                    this._includes = value;
                    this.OnIncludesChanged(e);
                    this.OnPropertyChanged("Includes", e);
                }
            }
        }
        
        /// <summary>
        /// The includesfile property
        /// </summary>
        [XmlElementNameAttribute("includesfile")]
        [XmlAttributeAttribute(true)]
        public virtual string Includesfile
        {
            get
            {
                return this._includesfile;
            }
            set
            {
                if ((this._includesfile != value))
                {
                    string old = this._includesfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncludesfileChanging(e);
                    this.OnPropertyChanging("Includesfile", e);
                    this._includesfile = value;
                    this.OnIncludesfileChanged(e);
                    this.OnPropertyChanged("Includesfile", e);
                }
            }
        }
        
        /// <summary>
        /// The excludes property
        /// </summary>
        [XmlElementNameAttribute("excludes")]
        [XmlAttributeAttribute(true)]
        public virtual string Excludes
        {
            get
            {
                return this._excludes;
            }
            set
            {
                if ((this._excludes != value))
                {
                    string old = this._excludes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExcludesChanging(e);
                    this.OnPropertyChanging("Excludes", e);
                    this._excludes = value;
                    this.OnExcludesChanged(e);
                    this.OnPropertyChanged("Excludes", e);
                }
            }
        }
        
        /// <summary>
        /// The excludesfile property
        /// </summary>
        [XmlElementNameAttribute("excludesfile")]
        [XmlAttributeAttribute(true)]
        public virtual string Excludesfile
        {
            get
            {
                return this._excludesfile;
            }
            set
            {
                if ((this._excludesfile != value))
                {
                    string old = this._excludesfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExcludesfileChanging(e);
                    this.OnPropertyChanging("Excludesfile", e);
                    this._excludesfile = value;
                    this.OnExcludesfileChanged(e);
                    this.OnPropertyChanged("Excludesfile", e);
                }
            }
        }
        
        /// <summary>
        /// The defaultexcludes property
        /// </summary>
        [XmlElementNameAttribute("defaultexcludes")]
        [XmlAttributeAttribute(true)]
        public virtual string Defaultexcludes
        {
            get
            {
                return this._defaultexcludes;
            }
            set
            {
                if ((this._defaultexcludes != value))
                {
                    string old = this._defaultexcludes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultexcludesChanging(e);
                    this.OnPropertyChanging("Defaultexcludes", e);
                    this._defaultexcludes = value;
                    this.OnDefaultexcludesChanged(e);
                    this.OnPropertyChanged("Defaultexcludes", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Delete/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Gets fired before the Verbose property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VerboseChanging;
        
        /// <summary>
        /// Gets fired when the Verbose property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VerboseChanged;
        
        /// <summary>
        /// Gets fired before the Quiet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuietChanging;
        
        /// <summary>
        /// Gets fired when the Quiet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuietChanged;
        
        /// <summary>
        /// Gets fired before the Failonerror property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailonerrorChanging;
        
        /// <summary>
        /// Gets fired when the Failonerror property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailonerrorChanged;
        
        /// <summary>
        /// Gets fired before the IncludeEmptyDirs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanging;
        
        /// <summary>
        /// Gets fired when the IncludeEmptyDirs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanged;
        
        /// <summary>
        /// Gets fired before the Includes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludesChanging;
        
        /// <summary>
        /// Gets fired when the Includes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludesChanged;
        
        /// <summary>
        /// Gets fired before the Includesfile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludesfileChanging;
        
        /// <summary>
        /// Gets fired when the Includesfile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncludesfileChanged;
        
        /// <summary>
        /// Gets fired before the Excludes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcludesChanging;
        
        /// <summary>
        /// Gets fired when the Excludes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcludesChanged;
        
        /// <summary>
        /// Gets fired before the Excludesfile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcludesfileChanging;
        
        /// <summary>
        /// Gets fired when the Excludesfile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcludesfileChanged;
        
        /// <summary>
        /// Gets fired before the Defaultexcludes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanging;
        
        /// <summary>
        /// Gets fired when the Defaultexcludes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanged;
        
        /// <summary>
        /// Raises the FileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VerboseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVerboseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VerboseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VerboseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVerboseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VerboseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuietChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuietChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuietChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuietChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuietChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuietChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailonerrorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailonerrorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailonerrorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailonerrorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailonerrorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailonerrorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludeEmptyDirsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludeEmptyDirsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludeEmptyDirsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludeEmptyDirsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludeEmptyDirsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludeEmptyDirsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesfileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesfileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludesfileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncludesfileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncludesfileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncludesfileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcludesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcludesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcludesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcludesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcludesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcludesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcludesfileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcludesfileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcludesfileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcludesfileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcludesfileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcludesfileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultexcludesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultexcludesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultexcludesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultexcludesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultexcludesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultexcludesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FILE"))
            {
                return this.File;
            }
            if ((attribute == "DIR"))
            {
                return this.Dir;
            }
            if ((attribute == "VERBOSE"))
            {
                return this.Verbose;
            }
            if ((attribute == "QUIET"))
            {
                return this.Quiet;
            }
            if ((attribute == "FAILONERROR"))
            {
                return this.Failonerror;
            }
            if ((attribute == "INCLUDEEMPTYDIRS"))
            {
                return this.IncludeEmptyDirs;
            }
            if ((attribute == "INCLUDES"))
            {
                return this.Includes;
            }
            if ((attribute == "INCLUDESFILE"))
            {
                return this.Includesfile;
            }
            if ((attribute == "EXCLUDES"))
            {
                return this.Excludes;
            }
            if ((attribute == "EXCLUDESFILE"))
            {
                return this.Excludesfile;
            }
            if ((attribute == "DEFAULTEXCLUDES"))
            {
                return this.Defaultexcludes;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FILE"))
            {
                this.File = ((string)(value));
                return;
            }
            if ((feature == "DIR"))
            {
                this.Dir = ((string)(value));
                return;
            }
            if ((feature == "VERBOSE"))
            {
                this.Verbose = ((string)(value));
                return;
            }
            if ((feature == "QUIET"))
            {
                this.Quiet = ((string)(value));
                return;
            }
            if ((feature == "FAILONERROR"))
            {
                this.Failonerror = ((string)(value));
                return;
            }
            if ((feature == "INCLUDEEMPTYDIRS"))
            {
                this.IncludeEmptyDirs = ((string)(value));
                return;
            }
            if ((feature == "INCLUDES"))
            {
                this.Includes = ((string)(value));
                return;
            }
            if ((feature == "INCLUDESFILE"))
            {
                this.Includesfile = ((string)(value));
                return;
            }
            if ((feature == "EXCLUDES"))
            {
                this.Excludes = ((string)(value));
                return;
            }
            if ((feature == "EXCLUDESFILE"))
            {
                this.Excludesfile = ((string)(value));
                return;
            }
            if ((feature == "DEFAULTEXCLUDES"))
            {
                this.Defaultexcludes = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/atl/atlTransformations/Ant#//Delete/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the file property
        /// </summary>
        private sealed class FileProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FileProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.File;
                }
                set
                {
                    this.ModelElement.File = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dir property
        /// </summary>
        private sealed class DirProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dir;
                }
                set
                {
                    this.ModelElement.Dir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the verbose property
        /// </summary>
        private sealed class VerboseProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VerboseProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Verbose;
                }
                set
                {
                    this.ModelElement.Verbose = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VerboseChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VerboseChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quiet property
        /// </summary>
        private sealed class QuietProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuietProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Quiet;
                }
                set
                {
                    this.ModelElement.Quiet = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuietChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuietChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failonerror property
        /// </summary>
        private sealed class FailonerrorProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailonerrorProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Failonerror;
                }
                set
                {
                    this.ModelElement.Failonerror = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailonerrorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailonerrorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the includeEmptyDirs property
        /// </summary>
        private sealed class IncludeEmptyDirsProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncludeEmptyDirsProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IncludeEmptyDirs;
                }
                set
                {
                    this.ModelElement.IncludeEmptyDirs = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludeEmptyDirsChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludeEmptyDirsChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the includes property
        /// </summary>
        private sealed class IncludesProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncludesProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Includes;
                }
                set
                {
                    this.ModelElement.Includes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the includesfile property
        /// </summary>
        private sealed class IncludesfileProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncludesfileProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Includesfile;
                }
                set
                {
                    this.ModelElement.Includesfile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludesfileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IncludesfileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the excludes property
        /// </summary>
        private sealed class ExcludesProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExcludesProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Excludes;
                }
                set
                {
                    this.ModelElement.Excludes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExcludesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExcludesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the excludesfile property
        /// </summary>
        private sealed class ExcludesfileProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExcludesfileProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Excludesfile;
                }
                set
                {
                    this.ModelElement.Excludesfile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExcludesfileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ExcludesfileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the defaultexcludes property
        /// </summary>
        private sealed class DefaultexcludesProxy : ModelPropertyChange<IDelete, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultexcludesProxy(IDelete modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Defaultexcludes;
                }
                set
                {
                    this.ModelElement.Defaultexcludes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultexcludesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DefaultexcludesChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The public interface for Delete
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Delete))]
    [XmlDefaultImplementationTypeAttribute(typeof(Delete))]
    public interface IDelete : IModelElement, IFileTask
    {
        
        /// <summary>
        /// The file property
        /// </summary>
        string File
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dir property
        /// </summary>
        string Dir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The verbose property
        /// </summary>
        string Verbose
        {
            get;
            set;
        }
        
        /// <summary>
        /// The quiet property
        /// </summary>
        string Quiet
        {
            get;
            set;
        }
        
        /// <summary>
        /// The failonerror property
        /// </summary>
        string Failonerror
        {
            get;
            set;
        }
        
        /// <summary>
        /// The includeEmptyDirs property
        /// </summary>
        string IncludeEmptyDirs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The includes property
        /// </summary>
        string Includes
        {
            get;
            set;
        }
        
        /// <summary>
        /// The includesfile property
        /// </summary>
        string Includesfile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The excludes property
        /// </summary>
        string Excludes
        {
            get;
            set;
        }
        
        /// <summary>
        /// The excludesfile property
        /// </summary>
        string Excludesfile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The defaultexcludes property
        /// </summary>
        string Defaultexcludes
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Gets fired before the Verbose property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VerboseChanging;
        
        /// <summary>
        /// Gets fired when the Verbose property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VerboseChanged;
        
        /// <summary>
        /// Gets fired before the Quiet property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuietChanging;
        
        /// <summary>
        /// Gets fired when the Quiet property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuietChanged;
        
        /// <summary>
        /// Gets fired before the Failonerror property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailonerrorChanging;
        
        /// <summary>
        /// Gets fired when the Failonerror property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailonerrorChanged;
        
        /// <summary>
        /// Gets fired before the IncludeEmptyDirs property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanging;
        
        /// <summary>
        /// Gets fired when the IncludeEmptyDirs property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanged;
        
        /// <summary>
        /// Gets fired before the Includes property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludesChanging;
        
        /// <summary>
        /// Gets fired when the Includes property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludesChanged;
        
        /// <summary>
        /// Gets fired before the Includesfile property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludesfileChanging;
        
        /// <summary>
        /// Gets fired when the Includesfile property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludesfileChanged;
        
        /// <summary>
        /// Gets fired before the Excludes property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExcludesChanging;
        
        /// <summary>
        /// Gets fired when the Excludes property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExcludesChanged;
        
        /// <summary>
        /// Gets fired before the Excludesfile property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExcludesfileChanging;
        
        /// <summary>
        /// Gets fired when the Excludesfile property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExcludesfileChanged;
        
        /// <summary>
        /// Gets fired before the Defaultexcludes property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanging;
        
        /// <summary>
        /// Gets fired when the Defaultexcludes property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanged;
    }
    
    /// <summary>
    /// The public interface for Copy
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Copy))]
    [XmlDefaultImplementationTypeAttribute(typeof(Copy))]
    public interface ICopy : IModelElement, IFileTask
    {
        
        /// <summary>
        /// The file property
        /// </summary>
        string File
        {
            get;
            set;
        }
        
        /// <summary>
        /// The presservelastmodified property
        /// </summary>
        string Presservelastmodified
        {
            get;
            set;
        }
        
        /// <summary>
        /// The tofile property
        /// </summary>
        string Tofile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The todir property
        /// </summary>
        string Todir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The overwrite property
        /// </summary>
        string Overwrite
        {
            get;
            set;
        }
        
        /// <summary>
        /// The filtering property
        /// </summary>
        string Filtering
        {
            get;
            set;
        }
        
        /// <summary>
        /// The flatten property
        /// </summary>
        string Flatten
        {
            get;
            set;
        }
        
        /// <summary>
        /// The includeEmptyDirs property
        /// </summary>
        string IncludeEmptyDirs
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        IFileSet Fileset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The filterset property
        /// </summary>
        IFilterSet Filterset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mapper property
        /// </summary>
        IMapper Mapper
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Presservelastmodified property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PresservelastmodifiedChanging;
        
        /// <summary>
        /// Gets fired when the Presservelastmodified property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PresservelastmodifiedChanged;
        
        /// <summary>
        /// Gets fired before the Tofile property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TofileChanging;
        
        /// <summary>
        /// Gets fired when the Tofile property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TofileChanged;
        
        /// <summary>
        /// Gets fired before the Todir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TodirChanging;
        
        /// <summary>
        /// Gets fired when the Todir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TodirChanged;
        
        /// <summary>
        /// Gets fired before the Overwrite property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverwriteChanging;
        
        /// <summary>
        /// Gets fired when the Overwrite property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverwriteChanged;
        
        /// <summary>
        /// Gets fired before the Filtering property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilteringChanging;
        
        /// <summary>
        /// Gets fired when the Filtering property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilteringChanged;
        
        /// <summary>
        /// Gets fired before the Flatten property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FlattenChanging;
        
        /// <summary>
        /// Gets fired when the Flatten property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FlattenChanged;
        
        /// <summary>
        /// Gets fired before the IncludeEmptyDirs property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanging;
        
        /// <summary>
        /// Gets fired when the IncludeEmptyDirs property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncludeEmptyDirsChanged;
        
        /// <summary>
        /// Gets fired before the Fileset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilesetChanging;
        
        /// <summary>
        /// Gets fired when the Fileset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilesetChanged;
        
        /// <summary>
        /// Gets fired before the Filterset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FiltersetChanging;
        
        /// <summary>
        /// Gets fired when the Filterset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FiltersetChanged;
        
        /// <summary>
        /// Gets fired before the Mapper property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MapperChanging;
        
        /// <summary>
        /// Gets fired when the Mapper property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MapperChanged;
    }
    
    /// <summary>
    /// The public interface for Mkdir
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Mkdir))]
    [XmlDefaultImplementationTypeAttribute(typeof(Mkdir))]
    public interface IMkdir : IModelElement, IFileTask
    {
        
        /// <summary>
        /// The dir property
        /// </summary>
        string Dir
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanged;
    }
    
    /// <summary>
    /// The public interface for FileTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FileTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(FileTask))]
    public interface IFileTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for Jar
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Jar))]
    [XmlDefaultImplementationTypeAttribute(typeof(Jar))]
    public interface IJar : IModelElement, IArchiveTask
    {
        
        /// <summary>
        /// The jarfile property
        /// </summary>
        string Jarfile
        {
            get;
            set;
        }
        
        /// <summary>
        /// The basedir property
        /// </summary>
        string Basedir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The compress property
        /// </summary>
        string Compress
        {
            get;
            set;
        }
        
        /// <summary>
        /// The encoding property
        /// </summary>
        string Encoding
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manifest property
        /// </summary>
        string Manifest
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Jarfile property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JarfileChanging;
        
        /// <summary>
        /// Gets fired when the Jarfile property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JarfileChanged;
        
        /// <summary>
        /// Gets fired before the Basedir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasedirChanging;
        
        /// <summary>
        /// Gets fired when the Basedir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasedirChanged;
        
        /// <summary>
        /// Gets fired before the Compress property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CompressChanging;
        
        /// <summary>
        /// Gets fired when the Compress property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CompressChanged;
        
        /// <summary>
        /// Gets fired before the Encoding property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EncodingChanging;
        
        /// <summary>
        /// Gets fired when the Encoding property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EncodingChanged;
        
        /// <summary>
        /// Gets fired before the Manifest property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManifestChanging;
        
        /// <summary>
        /// Gets fired when the Manifest property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManifestChanged;
    }
    
    /// <summary>
    /// The public interface for ArchiveTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ArchiveTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(ArchiveTask))]
    public interface IArchiveTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for Javadoc
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Javadoc))]
    [XmlDefaultImplementationTypeAttribute(typeof(Javadoc))]
    public interface IJavadoc : IModelElement, IDocumentationTask
    {
        
        /// <summary>
        /// The sourcepath property
        /// </summary>
        string Sourcepath
        {
            get;
            set;
        }
        
        /// <summary>
        /// The destdir property
        /// </summary>
        string Destdir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The packagenames property
        /// </summary>
        string Packagenames
        {
            get;
            set;
        }
        
        /// <summary>
        /// The defaultexcludes property
        /// </summary>
        string Defaultexcludes
        {
            get;
            set;
        }
        
        /// <summary>
        /// The author property
        /// </summary>
        string Author
        {
            get;
            set;
        }
        
        /// <summary>
        /// The version property
        /// </summary>
        string Version
        {
            get;
            set;
        }
        
        /// <summary>
        /// The use property
        /// </summary>
        string Use
        {
            get;
            set;
        }
        
        /// <summary>
        /// The windowtitle property
        /// </summary>
        string Windowtitle
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Sourcepath property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourcepathChanging;
        
        /// <summary>
        /// Gets fired when the Sourcepath property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourcepathChanged;
        
        /// <summary>
        /// Gets fired before the Destdir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DestdirChanging;
        
        /// <summary>
        /// Gets fired when the Destdir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DestdirChanged;
        
        /// <summary>
        /// Gets fired before the Packagenames property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PackagenamesChanging;
        
        /// <summary>
        /// Gets fired when the Packagenames property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PackagenamesChanged;
        
        /// <summary>
        /// Gets fired before the Defaultexcludes property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanging;
        
        /// <summary>
        /// Gets fired when the Defaultexcludes property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultexcludesChanged;
        
        /// <summary>
        /// Gets fired before the Author property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuthorChanging;
        
        /// <summary>
        /// Gets fired when the Author property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuthorChanged;
        
        /// <summary>
        /// Gets fired before the Version property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VersionChanging;
        
        /// <summary>
        /// Gets fired when the Version property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VersionChanged;
        
        /// <summary>
        /// Gets fired before the Use property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UseChanging;
        
        /// <summary>
        /// Gets fired when the Use property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UseChanged;
        
        /// <summary>
        /// Gets fired before the Windowtitle property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindowtitleChanging;
        
        /// <summary>
        /// Gets fired when the Windowtitle property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindowtitleChanged;
    }
    
    /// <summary>
    /// The public interface for DocumentationTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DocumentationTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(DocumentationTask))]
    public interface IDocumentationTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for Javac
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Javac))]
    [XmlDefaultImplementationTypeAttribute(typeof(Javac))]
    public interface IJavac : IModelElement, ICompileTask
    {
        
        /// <summary>
        /// The srcdir property
        /// </summary>
        string Srcdir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The destdir property
        /// </summary>
        string Destdir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The debug property
        /// </summary>
        string Debug
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fork property
        /// </summary>
        string Fork
        {
            get;
            set;
        }
        
        /// <summary>
        /// The optimize property
        /// </summary>
        string Optimize
        {
            get;
            set;
        }
        
        /// <summary>
        /// The deprecation property
        /// </summary>
        string Deprecation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inExcludes property
        /// </summary>
        ISetExpression<IInExcludes> InExcludes
        {
            get;
        }
        
        /// <summary>
        /// The classPath property
        /// </summary>
        IClassPath ClassPath
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Srcdir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SrcdirChanging;
        
        /// <summary>
        /// Gets fired when the Srcdir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SrcdirChanged;
        
        /// <summary>
        /// Gets fired before the Destdir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DestdirChanging;
        
        /// <summary>
        /// Gets fired when the Destdir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DestdirChanged;
        
        /// <summary>
        /// Gets fired before the Debug property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DebugChanging;
        
        /// <summary>
        /// Gets fired when the Debug property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DebugChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the Optimize property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OptimizeChanging;
        
        /// <summary>
        /// Gets fired when the Optimize property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OptimizeChanged;
        
        /// <summary>
        /// Gets fired before the Deprecation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeprecationChanging;
        
        /// <summary>
        /// Gets fired when the Deprecation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeprecationChanged;
        
        /// <summary>
        /// Gets fired before the ClassPath property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassPathChanging;
        
        /// <summary>
        /// Gets fired when the ClassPath property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassPathChanged;
    }
    
    /// <summary>
    /// The public interface for CompileTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CompileTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(CompileTask))]
    public interface ICompileTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for FormatTstamp
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FormatTstamp))]
    [XmlDefaultImplementationTypeAttribute(typeof(FormatTstamp))]
    public interface IFormatTstamp : IModelElement
    {
        
        /// <summary>
        /// The property property
        /// </summary>
        string Property
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pattern property
        /// </summary>
        string Pattern
        {
            get;
            set;
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        string Offset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The unit property
        /// </summary>
        string Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The locale property
        /// </summary>
        string Locale
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Property property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PropertyChanging;
        
        /// <summary>
        /// Gets fired when the Property property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PropertyChanged;
        
        /// <summary>
        /// Gets fired before the Pattern property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PatternChanging;
        
        /// <summary>
        /// Gets fired when the Pattern property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PatternChanged;
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the Locale property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocaleChanging;
        
        /// <summary>
        /// Gets fired when the Locale property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocaleChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for Tstamp
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Tstamp))]
    [XmlDefaultImplementationTypeAttribute(typeof(Tstamp))]
    public interface ITstamp : IModelElement, IMiscellaneousTask
    {
        
        /// <summary>
        /// The format property
        /// </summary>
        ISetExpression<IFormatTstamp> Format
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Echo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Echo))]
    [XmlDefaultImplementationTypeAttribute(typeof(Echo))]
    public interface IEcho : IModelElement, IMiscellaneousTask
    {
        
        /// <summary>
        /// The message property
        /// </summary>
        string Message
        {
            get;
            set;
        }
        
        /// <summary>
        /// The file property
        /// </summary>
        string File
        {
            get;
            set;
        }
        
        /// <summary>
        /// The append property
        /// </summary>
        string Append
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Message property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MessageChanging;
        
        /// <summary>
        /// Gets fired when the Message property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MessageChanged;
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanged;
        
        /// <summary>
        /// Gets fired before the Append property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AppendChanging;
        
        /// <summary>
        /// Gets fired when the Append property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AppendChanged;
    }
    
    /// <summary>
    /// The public interface for MiscellaneousTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MiscellaneousTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(MiscellaneousTask))]
    public interface IMiscellaneousTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for Java
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Java))]
    [XmlDefaultImplementationTypeAttribute(typeof(Java))]
    public interface IJava : IModelElement, IExecutionTask
    {
        
        /// <summary>
        /// The classname property
        /// </summary>
        string Classname
        {
            get;
            set;
        }
        
        /// <summary>
        /// The jar property
        /// </summary>
        string Jar
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fork property
        /// </summary>
        string Fork
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classPath property
        /// </summary>
        IClassPath ClassPath
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the Jar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JarChanging;
        
        /// <summary>
        /// Gets fired when the Jar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JarChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the ClassPath property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassPathChanging;
        
        /// <summary>
        /// Gets fired when the ClassPath property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassPathChanged;
    }
    
    /// <summary>
    /// The public interface for Exec
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Exec))]
    [XmlDefaultImplementationTypeAttribute(typeof(Exec))]
    public interface IExec : IModelElement, IExecutionTask
    {
        
        /// <summary>
        /// The executable property
        /// </summary>
        string Executable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dir property
        /// </summary>
        string Dir
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Executable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExecutableChanging;
        
        /// <summary>
        /// Gets fired when the Executable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ExecutableChanged;
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanged;
    }
    
    /// <summary>
    /// The public interface for ExecutionTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ExecutionTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(ExecutionTask))]
    public interface IExecutionTask : IModelElement, IPreDefinedTask
    {
    }
    
    /// <summary>
    /// The public interface for PreDefinedTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PreDefinedTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(PreDefinedTask))]
    public interface IPreDefinedTask : IModelElement, ITask
    {
        
        /// <summary>
        /// The id property
        /// </summary>
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The taskname property
        /// </summary>
        string Taskname
        {
            get;
            set;
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        string Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Taskname property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TasknameChanging;
        
        /// <summary>
        /// Gets fired when the Taskname property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TasknameChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
    }
    
    /// <summary>
    /// The public interface for Attribut
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Attribut))]
    [XmlDefaultImplementationTypeAttribute(typeof(Attribut))]
    public interface IAttribut : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for NewTask
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(NewTask))]
    [XmlDefaultImplementationTypeAttribute(typeof(NewTask))]
    public interface INewTask : IModelElement, ITask
    {
        
        /// <summary>
        /// The taskName property
        /// </summary>
        ITaskDef TaskName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The attributes property
        /// </summary>
        ISetExpression<IAttribut> Attributes
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the TaskName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TaskNameChanging;
        
        /// <summary>
        /// Gets fired when the TaskName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TaskNameChanged;
    }
    
    /// <summary>
    /// The public interface for TaskDef
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TaskDef))]
    [XmlDefaultImplementationTypeAttribute(typeof(TaskDef))]
    public interface ITaskDef : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classname property
        /// </summary>
        string Classname
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for Task
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Task))]
    [XmlDefaultImplementationTypeAttribute(typeof(Task))]
    public interface ITask : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        ITarget Target
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetChanged;
    }
    
    /// <summary>
    /// The public interface for ClassPath
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ClassPath))]
    [XmlDefaultImplementationTypeAttribute(typeof(ClassPath))]
    public interface IClassPath : IModelElement, ISet
    {
        
        /// <summary>
        /// The refid property
        /// </summary>
        string Refid
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pathElement property
        /// </summary>
        ISetExpression<IPathElement> PathElement
        {
            get;
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        ISetExpression<IFileSet> Fileset
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Refid property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefidChanging;
        
        /// <summary>
        /// Gets fired when the Refid property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefidChanged;
    }
    
    /// <summary>
    /// The public interface for Path
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Path))]
    [XmlDefaultImplementationTypeAttribute(typeof(Path))]
    public interface IPath : IModelElement, ISet
    {
        
        /// <summary>
        /// The id property
        /// </summary>
        string Id
        {
            get;
            set;
        }
        
        /// <summary>
        /// The refid property
        /// </summary>
        string Refid
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        IPath PathMember
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pathElement property
        /// </summary>
        ISetExpression<IPathElement> PathElement
        {
            get;
        }
        
        /// <summary>
        /// The fileset property
        /// </summary>
        ISetExpression<IFileSet> Fileset
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the Refid property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefidChanging;
        
        /// <summary>
        /// Gets fired when the Refid property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RefidChanged;
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
    }
    
    /// <summary>
    /// The public interface for FilterSet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FilterSet))]
    [XmlDefaultImplementationTypeAttribute(typeof(FilterSet))]
    public interface IFilterSet : IModelElement, ISet
    {
        
        /// <summary>
        /// The starttoken property
        /// </summary>
        string Starttoken
        {
            get;
            set;
        }
        
        /// <summary>
        /// The endtoken property
        /// </summary>
        string Endtoken
        {
            get;
            set;
        }
        
        /// <summary>
        /// The filter property
        /// </summary>
        ISetExpression<IFilter> Filter
        {
            get;
        }
        
        /// <summary>
        /// The filtersfile property
        /// </summary>
        ISetExpression<IFiltersFile> Filtersfile
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Starttoken property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StarttokenChanging;
        
        /// <summary>
        /// Gets fired when the Starttoken property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StarttokenChanged;
        
        /// <summary>
        /// Gets fired before the Endtoken property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EndtokenChanging;
        
        /// <summary>
        /// Gets fired when the Endtoken property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EndtokenChanged;
    }
    
    /// <summary>
    /// The public interface for FileSet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FileSet))]
    [XmlDefaultImplementationTypeAttribute(typeof(FileSet))]
    public interface IFileSet : IModelElement, ISet
    {
        
        /// <summary>
        /// The dir property
        /// </summary>
        string Dir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The patternset property
        /// </summary>
        ISetExpression<IPatternSet> Patternset
        {
            get;
        }
        
        /// <summary>
        /// The include property
        /// </summary>
        ISetExpression<IIncludes> Include
        {
            get;
        }
        
        /// <summary>
        /// The exclude property
        /// </summary>
        ISetExpression<IExcludes> Exclude
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanged;
    }
    
    /// <summary>
    /// The public interface for PatternSet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PatternSet))]
    [XmlDefaultImplementationTypeAttribute(typeof(PatternSet))]
    public interface IPatternSet : IModelElement, ISet
    {
        
        /// <summary>
        /// The inexcludes property
        /// </summary>
        ISetExpression<IInExcludes> Inexcludes
        {
            get;
        }
    }
    
    /// <summary>
    /// The public interface for Set
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Set))]
    [XmlDefaultImplementationTypeAttribute(typeof(Set))]
    public interface ISet : IModelElement, IPattern
    {
    }
    
    /// <summary>
    /// The public interface for PathElement
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PathElement))]
    [XmlDefaultImplementationTypeAttribute(typeof(PathElement))]
    public interface IPathElement : IModelElement, IBasic
    {
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        string PathMember
        {
            get;
            set;
        }
        
        /// <summary>
        /// The location property
        /// </summary>
        string Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanged;
    }
    
    /// <summary>
    /// The public interface for FiltersFile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FiltersFile))]
    [XmlDefaultImplementationTypeAttribute(typeof(FiltersFile))]
    public interface IFiltersFile : IModelElement, IBasic
    {
        
        /// <summary>
        /// The file property
        /// </summary>
        string File
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanged;
    }
    
    /// <summary>
    /// The public interface for Filter
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Filter))]
    [XmlDefaultImplementationTypeAttribute(typeof(Filter))]
    public interface IFilter : IModelElement, IBasic
    {
        
        /// <summary>
        /// The token property
        /// </summary>
        string Token
        {
            get;
            set;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Token property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TokenChanging;
        
        /// <summary>
        /// Gets fired when the Token property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TokenChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanged;
    }
    
    /// <summary>
    /// The public interface for FileList
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FileList))]
    [XmlDefaultImplementationTypeAttribute(typeof(FileList))]
    public interface IFileList : IModelElement, IBasic
    {
        
        /// <summary>
        /// The dir property
        /// </summary>
        string Dir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The files property
        /// </summary>
        string Files
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Dir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanging;
        
        /// <summary>
        /// Gets fired when the Dir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DirChanged;
        
        /// <summary>
        /// Gets fired before the Files property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilesChanging;
        
        /// <summary>
        /// Gets fired when the Files property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FilesChanged;
    }
    
    /// <summary>
    /// The public interface for ExcludesFile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ExcludesFile))]
    [XmlDefaultImplementationTypeAttribute(typeof(ExcludesFile))]
    public interface IExcludesFile : IModelElement, IInExcludes
    {
    }
    
    /// <summary>
    /// The public interface for IncludesFile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(IncludesFile))]
    [XmlDefaultImplementationTypeAttribute(typeof(IncludesFile))]
    public interface IIncludesFile : IModelElement, IInExcludes
    {
    }
    
    /// <summary>
    /// The public interface for Excludes
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Excludes))]
    [XmlDefaultImplementationTypeAttribute(typeof(Excludes))]
    public interface IExcludes : IModelElement, IInExcludes
    {
    }
    
    /// <summary>
    /// The public interface for Includes
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Includes))]
    [XmlDefaultImplementationTypeAttribute(typeof(Includes))]
    public interface IIncludes : IModelElement, IInExcludes
    {
    }
    
    /// <summary>
    /// The public interface for InExcludes
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(InExcludes))]
    [XmlDefaultImplementationTypeAttribute(typeof(InExcludes))]
    public interface IInExcludes : IModelElement, IBasic
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ifCondition property
        /// </summary>
        string IfCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The unless property
        /// </summary>
        string Unless
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the IfCondition property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IfConditionChanging;
        
        /// <summary>
        /// Gets fired when the IfCondition property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IfConditionChanged;
        
        /// <summary>
        /// Gets fired before the Unless property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnlessChanging;
        
        /// <summary>
        /// Gets fired when the Unless property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnlessChanged;
    }
    
    /// <summary>
    /// The public interface for Mapper
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Mapper))]
    [XmlDefaultImplementationTypeAttribute(typeof(Mapper))]
    public interface IMapper : IModelElement, IBasic
    {
        
        /// <summary>
        /// The type property
        /// </summary>
        string Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classname property
        /// </summary>
        string Classname
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classpath property
        /// </summary>
        string Classpath
        {
            get;
            set;
        }
        
        /// <summary>
        /// The classpathref property
        /// </summary>
        string Classpathref
        {
            get;
            set;
        }
        
        /// <summary>
        /// The from property
        /// </summary>
        string From
        {
            get;
            set;
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        string To
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Classname property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanging;
        
        /// <summary>
        /// Gets fired when the Classname property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClassnameChanged;
        
        /// <summary>
        /// Gets fired before the Classpath property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClasspathChanging;
        
        /// <summary>
        /// Gets fired when the Classpath property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClasspathChanged;
        
        /// <summary>
        /// Gets fired before the Classpathref property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClasspathrefChanging;
        
        /// <summary>
        /// Gets fired when the Classpathref property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ClasspathrefChanged;
        
        /// <summary>
        /// Gets fired before the From property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FromChanging;
        
        /// <summary>
        /// Gets fired when the From property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FromChanged;
        
        /// <summary>
        /// Gets fired before the To property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToChanging;
        
        /// <summary>
        /// Gets fired when the To property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToChanged;
    }
    
    /// <summary>
    /// The public interface for Basic
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Basic))]
    [XmlDefaultImplementationTypeAttribute(typeof(Basic))]
    public interface IBasic : IModelElement, IPattern
    {
    }
    
    /// <summary>
    /// The public interface for Pattern
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Pattern))]
    [XmlDefaultImplementationTypeAttribute(typeof(Pattern))]
    public interface IPattern : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    public class TargetTasksCollection : ObservableOppositeOrderedSet<ITarget, ITask>
    {
        
        public TargetTasksCollection(ITarget parent) : 
                base(parent)
        {
        }
        
        private void OnItemParentChanged(object sender, ValueChangedEventArgs e)
        {
            if ((e.NewValue != this.Parent))
            {
                this.Remove(((ITask)(sender)));
            }
        }
        
        protected override void SetOpposite(ITask item, ITarget parent)
        {
            if ((parent != null))
            {
                item.ParentChanged += this.OnItemParentChanged;
                item.Target = parent;
            }
            else
            {
                item.ParentChanged -= this.OnItemParentChanged;
                if ((item.Target == this.Parent))
                {
                    item.Target = parent;
                }
            }
        }
    }
    
    /// <summary>
    /// The public interface for Target
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Target))]
    [XmlDefaultImplementationTypeAttribute(typeof(Target))]
    public interface ITarget : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        string Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// The unless property
        /// </summary>
        string Unless
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ifCondition property
        /// </summary>
        string IfCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The depends property
        /// </summary>
        ISetExpression<ITarget> Depends
        {
            get;
        }
        
        /// <summary>
        /// The tasks property
        /// </summary>
        IOrderedSetExpression<ITask> Tasks
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Gets fired before the Unless property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnlessChanging;
        
        /// <summary>
        /// Gets fired when the Unless property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnlessChanged;
        
        /// <summary>
        /// Gets fired before the IfCondition property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IfConditionChanging;
        
        /// <summary>
        /// Gets fired when the IfCondition property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IfConditionChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for PropertyEnv
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyEnv))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyEnv))]
    public interface IPropertyEnv : IModelElement, IProperty
    {
        
        /// <summary>
        /// The environment property
        /// </summary>
        string Environment
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Environment property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnvironmentChanging;
        
        /// <summary>
        /// Gets fired when the Environment property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnvironmentChanged;
    }
    
    /// <summary>
    /// The public interface for PropertyFile
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyFile))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyFile))]
    public interface IPropertyFile : IModelElement, IProperty
    {
        
        /// <summary>
        /// The file property
        /// </summary>
        string File
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the File property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanging;
        
        /// <summary>
        /// Gets fired when the File property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FileChanged;
    }
    
    /// <summary>
    /// The public interface for PropertyLocation
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyLocation))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyLocation))]
    public interface IPropertyLocation : IModelElement, IPropertyName
    {
        
        /// <summary>
        /// The location property
        /// </summary>
        string Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanged;
    }
    
    /// <summary>
    /// The public interface for PropertyValue
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyValue))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyValue))]
    public interface IPropertyValue : IModelElement, IPropertyName
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        string Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueChanged;
    }
    
    /// <summary>
    /// The public interface for PropertyName
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PropertyName))]
    [XmlDefaultImplementationTypeAttribute(typeof(PropertyName))]
    public interface IPropertyName : IModelElement, IProperty
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
    }
    
    /// <summary>
    /// The public interface for Property
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Property))]
    [XmlDefaultImplementationTypeAttribute(typeof(Property))]
    public interface IProperty : IModelElement
    {
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
    }
    
    /// <summary>
    /// The public interface for Project
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Project))]
    [XmlDefaultImplementationTypeAttribute(typeof(Project))]
    public interface IProject : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The basedir property
        /// </summary>
        string Basedir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The description property
        /// </summary>
        string Description
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ID property
        /// </summary>
        string ID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The default property
        /// </summary>
        ITarget Default
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pathMember property
        /// </summary>
        IPath PathMember
        {
            get;
            set;
        }
        
        /// <summary>
        /// The properties property
        /// </summary>
        IOrderedSetExpression<IProperty> Properties
        {
            get;
        }
        
        /// <summary>
        /// The taskdef property
        /// </summary>
        ISetExpression<ITaskDef> Taskdef
        {
            get;
        }
        
        /// <summary>
        /// The targets property
        /// </summary>
        IOrderedSetExpression<ITarget> Targets
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Basedir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasedirChanging;
        
        /// <summary>
        /// Gets fired when the Basedir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasedirChanged;
        
        /// <summary>
        /// Gets fired before the Description property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanging;
        
        /// <summary>
        /// Gets fired when the Description property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DescriptionChanged;
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        /// <summary>
        /// Gets fired before the PathMember property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanging;
        
        /// <summary>
        /// Gets fired when the PathMember property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PathMemberChanged;
    }
}
