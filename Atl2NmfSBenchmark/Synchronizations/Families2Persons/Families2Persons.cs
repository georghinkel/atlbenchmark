//------------------------------------------------------------------------------
// <auto-generated>
//     This Code was automatically created by the Atl2NmfS higher-order transformation.
//
//     Changes to this file can result in a wrong behavior and are discarded if the code is generated again.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using NMF.Expressions.Linq;
using NMF.Synchronizations;
using NMF.Transformations;
using NMF.Utilities;
using NMF.Models;

namespace Families2PersonsNamespace
{
    public class Families2Persons : ReflectiveSynchronization
    {
    	public static InputModelContainer InputModelContainer { get; set; }
    	
    	public class Model2ModelMainRule : SynchronizationRule<InputModelContainer, OutputModelContainer>
    	{
    	    public override void DeclareSynchronization()
    	    {
    	    	SynchronizeManyLeftToRightOnly(SyncRule<Member2Male>(),
    	    		input => input.IN.Descendants().OfType<Families.IMember>().Where(x => x.Member2MaleFilter()),
    	    		output => new OutputModelCollection<Persons.IMale>(output.OUT.RootElements.OfType<IModelElement, Persons.IMale>()));
    	    	
    	    	SynchronizeManyLeftToRightOnly(SyncRule<Member2Female>(),
    	    		input => input.IN.Descendants().OfType<Families.IMember>().Where(x => x.Member2FemaleFilter()),
    	    		output => new OutputModelCollection<Persons.IFemale>(output.OUT.RootElements.OfType<IModelElement, Persons.IFemale>()));
    	    }
    	}
    	
    	public class Member2Male : SynchronizationRule<Families.IMember, Persons.IMale>
    	{
    	    public override void DeclareSynchronization()
    	    {
    	    	SynchronizeLeftToRightOnly(
    	    		s => s.FirstName + " " + s.FamilyName(),
    	    		t => t.FullName);
    	    }
    	}
    	
    	public class Member2Female : SynchronizationRule<Families.IMember, Persons.IFemale>
    	{
    	    public override void DeclareSynchronization()
    	    {
    	    	SynchronizeLeftToRightOnly(
    	    		s => s.FirstName + " " + s.FamilyName(),
    	    		t => t.FullName);
    	    }
    	}
    }
}
