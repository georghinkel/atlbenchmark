//------------------------------------------------------------------------------
// <auto-generated>
//     This Code was automatically created by the Atl2NmfS higher-order transformation.
//
//     Changes to this file can result in a wrong behavior and are discarded if the code is generated again.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;

namespace Families2PersonsNamespace
{
    public static class HelperExtensionMethods
    {
    	
    	[ObservableProxy(typeof(Proxies), "FamilyName")]
    	public static string FamilyName(this Families.IMember self)
    	{
    		//attribute helper
    		return (!(self.FamilyFather == null)) ? 
    			(self.FamilyFather.LastName) : ((!(self.FamilyMother == null)) ? 
    				(self.FamilyMother.LastName) : ((!(self.FamilySon == null)) ? 
    					(self.FamilySon.LastName) : (self.FamilyDaughter.LastName)));
    	}
    	
    	
    	[ObservableProxy(typeof(Proxies), "IsFemale")]
    	public static bool IsFemale(this Families.IMember self)
    	{
    		//functional helper
    		return (!(self.FamilyMother == null)) ? 
    			(true) : ((!(self.FamilyDaughter == null)) ? 
    				(true) : (false));
    	}
    	
    	
    	private class Proxies
    	{
    		
    		private static readonly ObservingFunc<Families.IMember, string> familyNameFunc = 
    			new ObservingFunc<Families.IMember, string>(self => (!(self.FamilyFather == null)) ? 
    				(self.FamilyFather.LastName) : ((!(self.FamilyMother == null)) ? 
    					(self.FamilyMother.LastName) : ((!(self.FamilySon == null)) ? 
    						(self.FamilySon.LastName) : (self.FamilyDaughter.LastName))));
    		
    		public static INotifyValue<string> FamilyName(INotifyValue<Families.IMember> self)
    		{
    		    return familyNameFunc.Observe(self);
    		}
    		
    		
    		private static readonly ObservingFunc<Families.IMember, bool> IsFemaleFunc = 
    			new ObservingFunc<Families.IMember, bool>((self) => (!(self.FamilyMother == null)) ? 
    				(true) : ((!(self.FamilyDaughter == null)) ? 
    					(true) : (false)));
    			
    		public static INotifyValue<bool> IsFemale(INotifyValue<Families.IMember> self)
    		{
    		    return IsFemaleFunc.Observe(self);
    		}
    		
    	}
    }
}
